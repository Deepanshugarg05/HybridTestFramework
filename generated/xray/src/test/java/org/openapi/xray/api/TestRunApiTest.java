/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.api;

import org.openapi.xray.invoker.ApiException;
import org.openapi.xray.model.Error;
import org.openapi.xray.model.FileResponse;
import org.openapi.xray.model.InlineResponse200;
import org.openapi.xray.model.InlineResponse2001;
import org.openapi.xray.model.OneOfUpdateTRCustomFieldValueSingleUpdateTRCustomFieldValueMulti;
import java.util.Set;
import org.openapi.xray.model.StepResult;
import org.openapi.xray.model.StepResultsResponse;
import org.openapi.xray.model.TestRunCustomFieldResponse;
import org.openapi.xray.model.TestRunIterationInformation;
import org.openapi.xray.model.TestRunResponse;
import org.openapi.xray.model.TestStepResultEvidenceInput;
import org.openapi.xray.model.UNKNOWN_BASE_TYPE;
import org.openapi.xray.model.UpdateIteration;
import org.openapi.xray.model.UpdateIterationResponse;
import org.openapi.xray.model.UpdateStepResult;
import org.openapi.xray.model.UpdateTRCustomFieldValueMulti;
import org.openapi.xray.model.UpdateTRCustomFieldValueSingle;
import org.openapi.xray.model.UpdateTestRun;
import org.openapi.xray.model.UpdateTestRunResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestRunApi
 */
@Ignore
public class TestRunApiTest {

    private final TestRunApi api = new TestRunApi();

    
    /**
     * 
     *
     * Retrieves all the Test Runs from a given context. With this endpoint you can obtain all the Test Runs (paginated) in one of the following contexts: - In a Test Execution issue. A Test issue key can be used in order to return a single TestRun from the Test Execution issue - In a Test Plan issue - In a JQL filter that returns several Test Execution issue  In case the Test Run has iterations, steps will not appear. However, if the Test has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestrunsTest() throws ApiException {
        String testExecKey = null;
        String testKey = null;
        String testPlanKey = null;
        String includeTestFields = null;
        String savedFilterId = null;
        Integer limit = null;
        Integer page = null;
                Set<InlineResponse2001> response = api.getTestruns(testExecKey, testKey, testPlanKey, includeTestFields, savedFilterId, limit, page);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunGetTest() throws ApiException {
        String testExecIssueKey = null;
        String testIssueKey = null;
                TestRunResponse response = api.testrunGet(testExecIssueKey, testIssueKey);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a Test Run Custom Field, given the Test Run and the Test Run Custom Field ids.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdCustomfieldCustomFieldIdGetTest() throws ApiException {
        String id = null;
        String customFieldId = null;
                TestRunCustomFieldResponse response = api.testrunIdCustomfieldCustomFieldIdGet(id, customFieldId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates the value of a test run custom field, given the Test Run and the Test Run Custom Field ids. The custom field value should be a valid value according to the field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdCustomfieldCustomFieldIdPutTest() throws ApiException {
        String id = null;
        String customFieldId = null;
        UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE = null;
                api.testrunIdCustomfieldCustomFieldIdPut(id, customFieldId, UNKNOWN_BASE_TYPE);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdGetTest() throws ApiException {
        String id = null;
                TestRunResponse response = api.testrunIdGet(id);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves an iteration given the Test Run id and the id of the iteration. &lt;br/&gt; The response will contain all the information regarding the iteration (status, parameters, and the steps). The steps will appear with the parameters converted to their value if the resolved dataset does not have a parameter referenced on a  step it will be displayed like ${parameter_name}. &lt;br/&gt;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdGetTest() throws ApiException {
        String id = null;
        String iterationId = null;
                TestRunIterationInformation response = api.testrunIdIterationIterationIdGet(id, iterationId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update all values from an iteration in a Test Run.&lt;br/&gt; The user can update the iteration status and the Test Step results of that iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdPutTest() throws ApiException {
        String id = null;
        String iterationId = null;
        UpdateIteration updateIteration = null;
                UpdateIterationResponse response = api.testrunIdIterationIterationIdPut(id, iterationId, updateIteration);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves all Test Step results for the given iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepGetTest() throws ApiException {
        String id = null;
        String iterationId = null;
                List<StepResult> response = api.testrunIdIterationIterationIdStepGet(id, iterationId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove an evidence from a Test Step result within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
        String attachmentId = null;
                api.testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete(id, iterationId, stepResultId, attachmentId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Remove all evidences with the same filename from the Test step result within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
        String filename = null;
                api.testrunIdIterationIterationIdStepStepResultIdAttachmentDelete(id, iterationId, stepResultId, filename);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Return a json that contains an array with all the execution evidences the Test Step has within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentGetTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
                List<FileResponse> response = api.testrunIdIterationIterationIdStepStepResultIdAttachmentGet(id, iterationId, stepResultId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Add a new evidence to the Test Step result within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentPostTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
        TestStepResultEvidenceInput testStepResultEvidenceInput = null;
                api.testrunIdIterationIterationIdStepStepResultIdAttachmentPost(id, iterationId, stepResultId, testStepResultEvidenceInput);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves all the information for the given Test Step result within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdGetTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
                StepResult response = api.testrunIdIterationIterationIdStepStepResultIdGet(id, iterationId, stepResultId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates the Test Step result within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdPutTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
        UpdateStepResult updateStepResult = null;
                StepResultsResponse response = api.testrunIdIterationIterationIdStepStepResultIdPut(id, iterationId, stepResultId, updateStepResult);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Retrieves the Test Step status of a Test Step Result within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdStatusGetTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
                InlineResponse200 response = api.testrunIdIterationIterationIdStepStepResultIdStatusGet(id, iterationId, stepResultId);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Updates the Test Step status within an iteration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdIterationIterationIdStepStepResultIdStatusPutTest() throws ApiException {
        String id = null;
        String iterationId = null;
        String stepResultId = null;
        String status = null;
                api.testrunIdIterationIterationIdStepStepResultIdStatusPut(id, iterationId, stepResultId, status);
        // TODO: test validations
    }
    
    /**
     * 
     *
     * Update all the values of a Test Run.&lt;br/&gt; The user can update the values of the overall status, step results, assignee, test environments, add defects and evidences and so on. &lt;br/&gt; &lt;br/&gt; To update the value of a Test Run custom field, the id of the field must be provided as well as a valid value for that custom field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt; Also, **it is not possible to change the Test Run to a final status when there are required Test Run custom fields with empty values.** &lt;br/&gt; &lt;br/&gt; In the case of a Test Run of a manual Test type, it is possible to update the steps only if there are zero or one iterations. If there are multiple iterations, it is not possible to update the steps through this endpoint, only the iterations.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void testrunIdPutTest() throws ApiException {
        String id = null;
        UpdateTestRun updateTestRun = null;
                UpdateTestRunResponse response = api.testrunIdPut(id, updateTestRun);
        // TODO: test validations
    }
    
}
