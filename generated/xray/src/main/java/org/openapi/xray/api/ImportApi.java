/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.api;

import org.openapi.xray.invoker.ApiCallback;
import org.openapi.xray.invoker.ApiClient;
import org.openapi.xray.invoker.ApiException;
import org.openapi.xray.invoker.ApiResponse;
import org.openapi.xray.invoker.Configuration;
import org.openapi.xray.invoker.Pair;
import org.openapi.xray.invoker.ProgressRequestBody;
import org.openapi.xray.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.xray.model.Error;
import java.io.File;
import org.openapi.xray.model.RestApiSuccessResponse;
import org.openapi.xray.model.XrayJsonImportExecution;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImportApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImportApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for postImportExecution
     * @param xrayJsonImportExecution  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImportExecutionCall(XrayJsonImportExecution xrayJsonImportExecution, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = xrayJsonImportExecution;

        // create path and map variables
        String localVarPath = "/import/execution";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImportExecutionValidateBeforeCall(XrayJsonImportExecution xrayJsonImportExecution, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = postImportExecutionCall(xrayJsonImportExecution, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint used to import Test results in the Xray JSON format. &lt;br&gt;&lt;/br&gt; Updating an existing Test Run using Xray format REST API will reset all dataset related fields. This means that all current iteration data and dataset present in the Test Run will be replaced with the new information given in the REST API request.
     * @param xrayJsonImportExecution  (optional)
     * @return RestApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RestApiSuccessResponse postImportExecution(XrayJsonImportExecution xrayJsonImportExecution) throws ApiException {
        ApiResponse<RestApiSuccessResponse> localVarResp = postImportExecutionWithHttpInfo(xrayJsonImportExecution);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint used to import Test results in the Xray JSON format. &lt;br&gt;&lt;/br&gt; Updating an existing Test Run using Xray format REST API will reset all dataset related fields. This means that all current iteration data and dataset present in the Test Run will be replaced with the new information given in the REST API request.
     * @param xrayJsonImportExecution  (optional)
     * @return ApiResponse&lt;RestApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestApiSuccessResponse> postImportExecutionWithHttpInfo(XrayJsonImportExecution xrayJsonImportExecution) throws ApiException {
        okhttp3.Call localVarCall = postImportExecutionValidateBeforeCall(xrayJsonImportExecution, null);
        Type localVarReturnType = new TypeToken<RestApiSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint used to import Test results in the Xray JSON format. &lt;br&gt;&lt;/br&gt; Updating an existing Test Run using Xray format REST API will reset all dataset related fields. This means that all current iteration data and dataset present in the Test Run will be replaced with the new information given in the REST API request.
     * @param xrayJsonImportExecution  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImportExecutionAsync(XrayJsonImportExecution xrayJsonImportExecution, final ApiCallback<RestApiSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImportExecutionValidateBeforeCall(xrayJsonImportExecution, _callback);
        Type localVarReturnType = new TypeToken<RestApiSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postImportExecutionMultipart
     * @param result The Xray JSON file, same as described in the &#x60;POST /import/execution&#x60; ([link](https://docs.getxray.app/display/XRAY420/v2.0#/Import/post-import-execution)). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Create new Test Execution issue)&lt;/summary&gt;  &#x60;&#x60;&#x60; {   \\\&quot;info\\\&quot;: {     \\\&quot;summary\\\&quot;: \\\&quot;Execution of automated tests for release v1.3\\\&quot;,     \\\&quot;description\\\&quot;: \\\&quot;This execution is automatically created when importing execution results from an external source\\\&quot;,     \\\&quot;version\\\&quot;: \\\&quot;v1.3\\\&quot;,     \\\&quot;user\\\&quot;: \\\&quot;admin\\\&quot;,     \\\&quot;revision\\\&quot;: \\\&quot;1.0.42134\\\&quot;,     \\\&quot;startDate\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,     \\\&quot;finishDate\\\&quot;: \\\&quot;2014-08-30T11:53:00+01:00\\\&quot;,     \\\&quot;testPlanKey\\\&quot;: \\\&quot;DEMO-100\\\&quot;,     \\\&quot;testEnvironments\\\&quot;: [       \\\&quot;iOS\\\&quot;,       \\\&quot;Android\\\&quot;     ]   },   \\\&quot;tests\\\&quot;: [     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-6\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Successful execution\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;     },     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-7\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:51:00+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:52:30+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Execution failed. Example #5 FAIL.\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;FAIL\\\&quot;,       \\\&quot;customFields\\\&quot;: [         {           \\\&quot;id\\\&quot;: 321,           \\\&quot;value\\\&quot;: [             \\\&quot;option A\\\&quot;,             \\\&quot;option B\\\&quot;           ]         }       ],       \\\&quot;evidences\\\&quot;: [         {           \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAEn(...base64 file enconding)\\\&quot;,           \\\&quot;filename\\\&quot;: \\\&quot;image21.jpg\\\&quot;,           \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;         }       ],       \\\&quot;examples\\\&quot;: [         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;FAIL\\\&quot;       ],       \\\&quot;steps\\\&quot;: [         {           \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;,           \\\&quot;comment\\\&quot;: \\\&quot;Coment on Test Step Result 1\\\&quot;,           \\\&quot;evidences\\\&quot;: [             {               \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEn(...base64 file enconding)\\\&quot;,               \\\&quot;filename\\\&quot;: \\\&quot;image22.jpg\\\&quot;,               \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;             }           ],           \\\&quot;actualResult\\\&quot;: \\\&quot;Actual result on Test Step 1\\\&quot;         }       ],       \\\&quot;defects\\\&quot;: [         \\\&quot;DEMO-10\\\&quot;,         \\\&quot;DEMO-11\\\&quot;       ]     }   ] } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Update Existing Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;testExecutionKey\\\&quot;: \\\&quot;DEMO-1206\\\&quot;,     \\\&quot;tests\\\&quot; : [         {             \\\&quot;testKey\\\&quot; : \\\&quot;DEMO-6\\\&quot;,             \\\&quot;start\\\&quot; : \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,             \\\&quot;finish\\\&quot; : \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,             \\\&quot;comment\\\&quot; : \\\&quot;Successful execution\\\&quot;,             \\\&quot;status\\\&quot; : \\\&quot;PASS\\\&quot;         }      ] } &#x60;&#x60;&#x60; &lt;/details&gt;   (required)
     * @param info Should follow the same format as the \\\&quot;fields\\\&quot; part, described in the [official Jira REST API](https://docs.atlassian.com/software/jira/docs/api/REST/latest/#api/2/issue-createIssue). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Fields for a new Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;project\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10402\\\&quot;         },         \\\&quot;summary\\\&quot;: \\\&quot;Brand new Test execution\\\&quot;,         \\\&quot;issuetype\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10007\\\&quot;         },         \\\&quot;components\\\&quot; : [             {             \\\&quot;name\\\&quot;:\\\&quot;Interface\\\&quot;             },             {             \\\&quot;name\\\&quot;:\\\&quot;Core\\\&quot;             }         ],         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;TES-38\\\&quot;         ]     } } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Fields for updating a Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;a_label\\\&quot;         ],         \\\&quot;description\\\&quot;: \\\&quot;update the issue description\\\&quot;     } } &#x60;&#x60;&#x60;  &lt;/details&gt;   (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImportExecutionMultipartCall(File result, File info, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/import/execution/multipart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (result != null) {
            localVarFormParams.put("result", result);
        }

        if (info != null) {
            localVarFormParams.put("info", info);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postImportExecutionMultipartValidateBeforeCall(File result, File info, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'result' is set
        if (result == null) {
            throw new ApiException("Missing the required parameter 'result' when calling postImportExecutionMultipart(Async)");
        }
        
        // verify the required parameter 'info' is set
        if (info == null) {
            throw new ApiException("Missing the required parameter 'info' when calling postImportExecutionMultipart(Async)");
        }
        

        okhttp3.Call localVarCall = postImportExecutionMultipartCall(result, info, _callback);
        return localVarCall;

    }

    /**
     * 
     * Endpoint used to import Test results in the Xray JSON format with Test Execution issue data.  &lt;br&gt;&lt;/br&gt; Updating an existing Test Run using Xray format REST API will reset all dataset related fields. This means that all current iteration data and dataset present in the Test Run will be replaced with the new information given in the REST API request.
     * @param result The Xray JSON file, same as described in the &#x60;POST /import/execution&#x60; ([link](https://docs.getxray.app/display/XRAY420/v2.0#/Import/post-import-execution)). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Create new Test Execution issue)&lt;/summary&gt;  &#x60;&#x60;&#x60; {   \\\&quot;info\\\&quot;: {     \\\&quot;summary\\\&quot;: \\\&quot;Execution of automated tests for release v1.3\\\&quot;,     \\\&quot;description\\\&quot;: \\\&quot;This execution is automatically created when importing execution results from an external source\\\&quot;,     \\\&quot;version\\\&quot;: \\\&quot;v1.3\\\&quot;,     \\\&quot;user\\\&quot;: \\\&quot;admin\\\&quot;,     \\\&quot;revision\\\&quot;: \\\&quot;1.0.42134\\\&quot;,     \\\&quot;startDate\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,     \\\&quot;finishDate\\\&quot;: \\\&quot;2014-08-30T11:53:00+01:00\\\&quot;,     \\\&quot;testPlanKey\\\&quot;: \\\&quot;DEMO-100\\\&quot;,     \\\&quot;testEnvironments\\\&quot;: [       \\\&quot;iOS\\\&quot;,       \\\&quot;Android\\\&quot;     ]   },   \\\&quot;tests\\\&quot;: [     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-6\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Successful execution\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;     },     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-7\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:51:00+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:52:30+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Execution failed. Example #5 FAIL.\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;FAIL\\\&quot;,       \\\&quot;customFields\\\&quot;: [         {           \\\&quot;id\\\&quot;: 321,           \\\&quot;value\\\&quot;: [             \\\&quot;option A\\\&quot;,             \\\&quot;option B\\\&quot;           ]         }       ],       \\\&quot;evidences\\\&quot;: [         {           \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAEn(...base64 file enconding)\\\&quot;,           \\\&quot;filename\\\&quot;: \\\&quot;image21.jpg\\\&quot;,           \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;         }       ],       \\\&quot;examples\\\&quot;: [         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;FAIL\\\&quot;       ],       \\\&quot;steps\\\&quot;: [         {           \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;,           \\\&quot;comment\\\&quot;: \\\&quot;Coment on Test Step Result 1\\\&quot;,           \\\&quot;evidences\\\&quot;: [             {               \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEn(...base64 file enconding)\\\&quot;,               \\\&quot;filename\\\&quot;: \\\&quot;image22.jpg\\\&quot;,               \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;             }           ],           \\\&quot;actualResult\\\&quot;: \\\&quot;Actual result on Test Step 1\\\&quot;         }       ],       \\\&quot;defects\\\&quot;: [         \\\&quot;DEMO-10\\\&quot;,         \\\&quot;DEMO-11\\\&quot;       ]     }   ] } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Update Existing Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;testExecutionKey\\\&quot;: \\\&quot;DEMO-1206\\\&quot;,     \\\&quot;tests\\\&quot; : [         {             \\\&quot;testKey\\\&quot; : \\\&quot;DEMO-6\\\&quot;,             \\\&quot;start\\\&quot; : \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,             \\\&quot;finish\\\&quot; : \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,             \\\&quot;comment\\\&quot; : \\\&quot;Successful execution\\\&quot;,             \\\&quot;status\\\&quot; : \\\&quot;PASS\\\&quot;         }      ] } &#x60;&#x60;&#x60; &lt;/details&gt;   (required)
     * @param info Should follow the same format as the \\\&quot;fields\\\&quot; part, described in the [official Jira REST API](https://docs.atlassian.com/software/jira/docs/api/REST/latest/#api/2/issue-createIssue). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Fields for a new Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;project\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10402\\\&quot;         },         \\\&quot;summary\\\&quot;: \\\&quot;Brand new Test execution\\\&quot;,         \\\&quot;issuetype\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10007\\\&quot;         },         \\\&quot;components\\\&quot; : [             {             \\\&quot;name\\\&quot;:\\\&quot;Interface\\\&quot;             },             {             \\\&quot;name\\\&quot;:\\\&quot;Core\\\&quot;             }         ],         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;TES-38\\\&quot;         ]     } } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Fields for updating a Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;a_label\\\&quot;         ],         \\\&quot;description\\\&quot;: \\\&quot;update the issue description\\\&quot;     } } &#x60;&#x60;&#x60;  &lt;/details&gt;   (required)
     * @return RestApiSuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public RestApiSuccessResponse postImportExecutionMultipart(File result, File info) throws ApiException {
        ApiResponse<RestApiSuccessResponse> localVarResp = postImportExecutionMultipartWithHttpInfo(result, info);
        return localVarResp.getData();
    }

    /**
     * 
     * Endpoint used to import Test results in the Xray JSON format with Test Execution issue data.  &lt;br&gt;&lt;/br&gt; Updating an existing Test Run using Xray format REST API will reset all dataset related fields. This means that all current iteration data and dataset present in the Test Run will be replaced with the new information given in the REST API request.
     * @param result The Xray JSON file, same as described in the &#x60;POST /import/execution&#x60; ([link](https://docs.getxray.app/display/XRAY420/v2.0#/Import/post-import-execution)). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Create new Test Execution issue)&lt;/summary&gt;  &#x60;&#x60;&#x60; {   \\\&quot;info\\\&quot;: {     \\\&quot;summary\\\&quot;: \\\&quot;Execution of automated tests for release v1.3\\\&quot;,     \\\&quot;description\\\&quot;: \\\&quot;This execution is automatically created when importing execution results from an external source\\\&quot;,     \\\&quot;version\\\&quot;: \\\&quot;v1.3\\\&quot;,     \\\&quot;user\\\&quot;: \\\&quot;admin\\\&quot;,     \\\&quot;revision\\\&quot;: \\\&quot;1.0.42134\\\&quot;,     \\\&quot;startDate\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,     \\\&quot;finishDate\\\&quot;: \\\&quot;2014-08-30T11:53:00+01:00\\\&quot;,     \\\&quot;testPlanKey\\\&quot;: \\\&quot;DEMO-100\\\&quot;,     \\\&quot;testEnvironments\\\&quot;: [       \\\&quot;iOS\\\&quot;,       \\\&quot;Android\\\&quot;     ]   },   \\\&quot;tests\\\&quot;: [     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-6\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Successful execution\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;     },     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-7\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:51:00+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:52:30+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Execution failed. Example #5 FAIL.\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;FAIL\\\&quot;,       \\\&quot;customFields\\\&quot;: [         {           \\\&quot;id\\\&quot;: 321,           \\\&quot;value\\\&quot;: [             \\\&quot;option A\\\&quot;,             \\\&quot;option B\\\&quot;           ]         }       ],       \\\&quot;evidences\\\&quot;: [         {           \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAEn(...base64 file enconding)\\\&quot;,           \\\&quot;filename\\\&quot;: \\\&quot;image21.jpg\\\&quot;,           \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;         }       ],       \\\&quot;examples\\\&quot;: [         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;FAIL\\\&quot;       ],       \\\&quot;steps\\\&quot;: [         {           \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;,           \\\&quot;comment\\\&quot;: \\\&quot;Coment on Test Step Result 1\\\&quot;,           \\\&quot;evidences\\\&quot;: [             {               \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEn(...base64 file enconding)\\\&quot;,               \\\&quot;filename\\\&quot;: \\\&quot;image22.jpg\\\&quot;,               \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;             }           ],           \\\&quot;actualResult\\\&quot;: \\\&quot;Actual result on Test Step 1\\\&quot;         }       ],       \\\&quot;defects\\\&quot;: [         \\\&quot;DEMO-10\\\&quot;,         \\\&quot;DEMO-11\\\&quot;       ]     }   ] } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Update Existing Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;testExecutionKey\\\&quot;: \\\&quot;DEMO-1206\\\&quot;,     \\\&quot;tests\\\&quot; : [         {             \\\&quot;testKey\\\&quot; : \\\&quot;DEMO-6\\\&quot;,             \\\&quot;start\\\&quot; : \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,             \\\&quot;finish\\\&quot; : \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,             \\\&quot;comment\\\&quot; : \\\&quot;Successful execution\\\&quot;,             \\\&quot;status\\\&quot; : \\\&quot;PASS\\\&quot;         }      ] } &#x60;&#x60;&#x60; &lt;/details&gt;   (required)
     * @param info Should follow the same format as the \\\&quot;fields\\\&quot; part, described in the [official Jira REST API](https://docs.atlassian.com/software/jira/docs/api/REST/latest/#api/2/issue-createIssue). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Fields for a new Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;project\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10402\\\&quot;         },         \\\&quot;summary\\\&quot;: \\\&quot;Brand new Test execution\\\&quot;,         \\\&quot;issuetype\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10007\\\&quot;         },         \\\&quot;components\\\&quot; : [             {             \\\&quot;name\\\&quot;:\\\&quot;Interface\\\&quot;             },             {             \\\&quot;name\\\&quot;:\\\&quot;Core\\\&quot;             }         ],         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;TES-38\\\&quot;         ]     } } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Fields for updating a Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;a_label\\\&quot;         ],         \\\&quot;description\\\&quot;: \\\&quot;update the issue description\\\&quot;     } } &#x60;&#x60;&#x60;  &lt;/details&gt;   (required)
     * @return ApiResponse&lt;RestApiSuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RestApiSuccessResponse> postImportExecutionMultipartWithHttpInfo(File result, File info) throws ApiException {
        okhttp3.Call localVarCall = postImportExecutionMultipartValidateBeforeCall(result, info, null);
        Type localVarReturnType = new TypeToken<RestApiSuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Endpoint used to import Test results in the Xray JSON format with Test Execution issue data.  &lt;br&gt;&lt;/br&gt; Updating an existing Test Run using Xray format REST API will reset all dataset related fields. This means that all current iteration data and dataset present in the Test Run will be replaced with the new information given in the REST API request.
     * @param result The Xray JSON file, same as described in the &#x60;POST /import/execution&#x60; ([link](https://docs.getxray.app/display/XRAY420/v2.0#/Import/post-import-execution)). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Create new Test Execution issue)&lt;/summary&gt;  &#x60;&#x60;&#x60; {   \\\&quot;info\\\&quot;: {     \\\&quot;summary\\\&quot;: \\\&quot;Execution of automated tests for release v1.3\\\&quot;,     \\\&quot;description\\\&quot;: \\\&quot;This execution is automatically created when importing execution results from an external source\\\&quot;,     \\\&quot;version\\\&quot;: \\\&quot;v1.3\\\&quot;,     \\\&quot;user\\\&quot;: \\\&quot;admin\\\&quot;,     \\\&quot;revision\\\&quot;: \\\&quot;1.0.42134\\\&quot;,     \\\&quot;startDate\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,     \\\&quot;finishDate\\\&quot;: \\\&quot;2014-08-30T11:53:00+01:00\\\&quot;,     \\\&quot;testPlanKey\\\&quot;: \\\&quot;DEMO-100\\\&quot;,     \\\&quot;testEnvironments\\\&quot;: [       \\\&quot;iOS\\\&quot;,       \\\&quot;Android\\\&quot;     ]   },   \\\&quot;tests\\\&quot;: [     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-6\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Successful execution\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;     },     {       \\\&quot;testKey\\\&quot;: \\\&quot;DEMO-7\\\&quot;,       \\\&quot;start\\\&quot;: \\\&quot;2014-08-30T11:51:00+01:00\\\&quot;,       \\\&quot;finish\\\&quot;: \\\&quot;2014-08-30T11:52:30+01:00\\\&quot;,       \\\&quot;comment\\\&quot;: \\\&quot;Execution failed. Example #5 FAIL.\\\&quot;,       \\\&quot;status\\\&quot;: \\\&quot;FAIL\\\&quot;,       \\\&quot;customFields\\\&quot;: [         {           \\\&quot;id\\\&quot;: 321,           \\\&quot;value\\\&quot;: [             \\\&quot;option A\\\&quot;,             \\\&quot;option B\\\&quot;           ]         }       ],       \\\&quot;evidences\\\&quot;: [         {           \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAEn(...base64 file enconding)\\\&quot;,           \\\&quot;filename\\\&quot;: \\\&quot;image21.jpg\\\&quot;,           \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;         }       ],       \\\&quot;examples\\\&quot;: [         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;PASS\\\&quot;,         \\\&quot;FAIL\\\&quot;       ],       \\\&quot;steps\\\&quot;: [         {           \\\&quot;status\\\&quot;: \\\&quot;PASS\\\&quot;,           \\\&quot;comment\\\&quot;: \\\&quot;Coment on Test Step Result 1\\\&quot;,           \\\&quot;evidences\\\&quot;: [             {               \\\&quot;data\\\&quot;: \\\&quot;iVBORw0KGgoAAAANSUhEUgAABkIAAAO9CAYAAADezXv6AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAAJcEhZcwAAEn(...base64 file enconding)\\\&quot;,               \\\&quot;filename\\\&quot;: \\\&quot;image22.jpg\\\&quot;,               \\\&quot;contentType\\\&quot;: \\\&quot;image/jpeg\\\&quot;             }           ],           \\\&quot;actualResult\\\&quot;: \\\&quot;Actual result on Test Step 1\\\&quot;         }       ],       \\\&quot;defects\\\&quot;: [         \\\&quot;DEMO-10\\\&quot;,         \\\&quot;DEMO-11\\\&quot;       ]     }   ] } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Update Existing Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;testExecutionKey\\\&quot;: \\\&quot;DEMO-1206\\\&quot;,     \\\&quot;tests\\\&quot; : [         {             \\\&quot;testKey\\\&quot; : \\\&quot;DEMO-6\\\&quot;,             \\\&quot;start\\\&quot; : \\\&quot;2014-08-30T11:47:35+01:00\\\&quot;,             \\\&quot;finish\\\&quot; : \\\&quot;2014-08-30T11:50:56+01:00\\\&quot;,             \\\&quot;comment\\\&quot; : \\\&quot;Successful execution\\\&quot;,             \\\&quot;status\\\&quot; : \\\&quot;PASS\\\&quot;         }      ] } &#x60;&#x60;&#x60; &lt;/details&gt;   (required)
     * @param info Should follow the same format as the \\\&quot;fields\\\&quot; part, described in the [official Jira REST API](https://docs.atlassian.com/software/jira/docs/api/REST/latest/#api/2/issue-createIssue). This file **must** be of type &#x60;application/json&#x60;.  &lt;details&gt; &lt;summary&gt;Example 1 (Fields for a new Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;project\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10402\\\&quot;         },         \\\&quot;summary\\\&quot;: \\\&quot;Brand new Test execution\\\&quot;,         \\\&quot;issuetype\\\&quot;: {             \\\&quot;id\\\&quot;: \\\&quot;10007\\\&quot;         },         \\\&quot;components\\\&quot; : [             {             \\\&quot;name\\\&quot;:\\\&quot;Interface\\\&quot;             },             {             \\\&quot;name\\\&quot;:\\\&quot;Core\\\&quot;             }         ],         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;TES-38\\\&quot;         ]     } } &#x60;&#x60;&#x60; &lt;/details&gt;  &lt;details&gt; &lt;summary&gt;Example 2 (Fields for updating a Test Execution)&lt;/summary&gt;  &#x60;&#x60;&#x60; {     \\\&quot;fields\\\&quot;: {         \\\&quot;customfield_10032\\\&quot; : [             \\\&quot;a_label\\\&quot;         ],         \\\&quot;description\\\&quot;: \\\&quot;update the issue description\\\&quot;     } } &#x60;&#x60;&#x60;  &lt;/details&gt;   (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postImportExecutionMultipartAsync(File result, File info, final ApiCallback<RestApiSuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = postImportExecutionMultipartValidateBeforeCall(result, info, _callback);
        Type localVarReturnType = new TypeToken<RestApiSuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
