/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.api;

import org.openapi.xray.invoker.ApiCallback;
import org.openapi.xray.invoker.ApiClient;
import org.openapi.xray.invoker.ApiException;
import org.openapi.xray.invoker.ApiResponse;
import org.openapi.xray.invoker.Configuration;
import org.openapi.xray.invoker.Pair;
import org.openapi.xray.invoker.ProgressRequestBody;
import org.openapi.xray.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.xray.model.CustomFieldMetaInformation;
import org.openapi.xray.model.Error;
import org.openapi.xray.model.OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation;
import org.openapi.xray.model.OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation;
import org.openapi.xray.model.OptionCustomFieldMetaInformation;
import org.openapi.xray.model.StepCustomFieldMetaInformation;
import org.openapi.xray.model.StepOptionCustomFieldMetaInformation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProjectApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProjectApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProjectApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectIdSettingsCustomfieldsTestrunsGet
     * @param id The id of the Project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectIdSettingsCustomfieldsTestrunsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{id}/settings/customfields/testruns"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectIdSettingsCustomfieldsTestrunsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectIdSettingsCustomfieldsTestrunsGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectIdSettingsCustomfieldsTestrunsGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrives the configuration of the Test Run custom fields for a project, given the project id. &lt;br/&gt;&lt;br/&gt; The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable, and the test types the custom field is associated with. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved.
     * @param id The id of the Project (required)
     * @return List&lt;OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation> projectIdSettingsCustomfieldsTestrunsGet(String id) throws ApiException {
        ApiResponse<List<OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation>> localVarResp = projectIdSettingsCustomfieldsTestrunsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrives the configuration of the Test Run custom fields for a project, given the project id. &lt;br/&gt;&lt;br/&gt; The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable, and the test types the custom field is associated with. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved.
     * @param id The id of the Project (required)
     * @return ApiResponse&lt;List&lt;OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation>> projectIdSettingsCustomfieldsTestrunsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectIdSettingsCustomfieldsTestrunsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrives the configuration of the Test Run custom fields for a project, given the project id. &lt;br/&gt;&lt;br/&gt; The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable, and the test types the custom field is associated with. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved.
     * @param id The id of the Project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectIdSettingsCustomfieldsTestrunsGetAsync(String id, final ApiCallback<List<OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectIdSettingsCustomfieldsTestrunsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<OneOfCustomFieldMetaInformationOptionCustomFieldMetaInformation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectIdSettingsCustomfieldsTeststepsGet
     * @param id The id of the Project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectIdSettingsCustomfieldsTeststepsGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/project/{id}/settings/customfields/teststeps"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectIdSettingsCustomfieldsTeststepsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling projectIdSettingsCustomfieldsTeststepsGet(Async)");
        }
        

        okhttp3.Call localVarCall = projectIdSettingsCustomfieldsTeststepsGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrives the configuration of the Test Step custom fields for a project, given the project id. &lt;br/&gt;&lt;br/&gt; The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved.
     * @param id The id of the Project (required)
     * @return List&lt;OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation> projectIdSettingsCustomfieldsTeststepsGet(String id) throws ApiException {
        ApiResponse<List<OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation>> localVarResp = projectIdSettingsCustomfieldsTeststepsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrives the configuration of the Test Step custom fields for a project, given the project id. &lt;br/&gt;&lt;br/&gt; The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved.
     * @param id The id of the Project (required)
     * @return ApiResponse&lt;List&lt;OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation>> projectIdSettingsCustomfieldsTeststepsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = projectIdSettingsCustomfieldsTeststepsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrives the configuration of the Test Step custom fields for a project, given the project id. &lt;br/&gt;&lt;br/&gt; The response contains all information related to the custom fields, such as id, name, description, if the field is require and enable. In the case of optional custom fields (Multiple and Single Select Fields and Radio Buttons), the list of the custom field options is also retrieved.
     * @param id The id of the Project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectIdSettingsCustomfieldsTeststepsGetAsync(String id, final ApiCallback<List<OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectIdSettingsCustomfieldsTeststepsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<OneOfStepCustomFieldMetaInformationStepOptionCustomFieldMetaInformation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
