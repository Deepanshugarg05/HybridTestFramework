/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.api;

import org.openapi.xray.invoker.ApiCallback;
import org.openapi.xray.invoker.ApiClient;
import org.openapi.xray.invoker.ApiException;
import org.openapi.xray.invoker.ApiResponse;
import org.openapi.xray.invoker.Configuration;
import org.openapi.xray.invoker.Pair;
import org.openapi.xray.invoker.ProgressRequestBody;
import org.openapi.xray.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.xray.model.Error;
import org.openapi.xray.model.FileResponse;
import org.openapi.xray.model.InlineResponse200;
import org.openapi.xray.model.InlineResponse2001;
import org.openapi.xray.model.OneOfUpdateTRCustomFieldValueSingleUpdateTRCustomFieldValueMulti;
import java.util.Set;
import org.openapi.xray.model.StepResult;
import org.openapi.xray.model.StepResultsResponse;
import org.openapi.xray.model.TestRunCustomFieldResponse;
import org.openapi.xray.model.TestRunIterationInformation;
import org.openapi.xray.model.TestRunResponse;
import org.openapi.xray.model.TestStepResultEvidenceInput;
import org.openapi.xray.model.UNKNOWN_BASE_TYPE;
import org.openapi.xray.model.UpdateIteration;
import org.openapi.xray.model.UpdateIterationResponse;
import org.openapi.xray.model.UpdateStepResult;
import org.openapi.xray.model.UpdateTRCustomFieldValueMulti;
import org.openapi.xray.model.UpdateTRCustomFieldValueSingle;
import org.openapi.xray.model.UpdateTestRun;
import org.openapi.xray.model.UpdateTestRunResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestRunApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestRunApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestRunApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getTestruns
     * @param testExecKey The Test Execution issue key (optional)
     * @param testKey The Test issue key (may only be used when using the \&quot;testExecKey\&quot;  param) (optional)
     * @param testPlanKey The Test Plan issue key (optional)
     * @param includeTestFields List of custom fields of the Test issue to be return in the responde (several custom fields can be requested by separating them with &#39;,&#39;) (optional)
     * @param savedFilterId The Jira JQL filter ID or name containing Test Executions issues (optional)
     * @param limit The number of maximum Test Runs to be returned (optional)
     * @param page The number of the results page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestrunsCall(String testExecKey, String testKey, String testPlanKey, String includeTestFields, String savedFilterId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testruns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testExecKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testExecKey", testExecKey));
        }

        if (testKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testKey", testKey));
        }

        if (testPlanKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testPlanKey", testPlanKey));
        }

        if (includeTestFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeTestFields", includeTestFields));
        }

        if (savedFilterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("savedFilterId", savedFilterId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestrunsValidateBeforeCall(String testExecKey, String testKey, String testPlanKey, String includeTestFields, String savedFilterId, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getTestrunsCall(testExecKey, testKey, testPlanKey, includeTestFields, savedFilterId, limit, page, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves all the Test Runs from a given context. With this endpoint you can obtain all the Test Runs (paginated) in one of the following contexts: - In a Test Execution issue. A Test issue key can be used in order to return a single TestRun from the Test Execution issue - In a Test Plan issue - In a JQL filter that returns several Test Execution issue  In case the Test Run has iterations, steps will not appear. However, if the Test has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param testExecKey The Test Execution issue key (optional)
     * @param testKey The Test issue key (may only be used when using the \&quot;testExecKey\&quot;  param) (optional)
     * @param testPlanKey The Test Plan issue key (optional)
     * @param includeTestFields List of custom fields of the Test issue to be return in the responde (several custom fields can be requested by separating them with &#39;,&#39;) (optional)
     * @param savedFilterId The Jira JQL filter ID or name containing Test Executions issues (optional)
     * @param limit The number of maximum Test Runs to be returned (optional)
     * @param page The number of the results page (optional)
     * @return Set&lt;InlineResponse2001&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Set<InlineResponse2001> getTestruns(String testExecKey, String testKey, String testPlanKey, String includeTestFields, String savedFilterId, Integer limit, Integer page) throws ApiException {
        ApiResponse<Set<InlineResponse2001>> localVarResp = getTestrunsWithHttpInfo(testExecKey, testKey, testPlanKey, includeTestFields, savedFilterId, limit, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the Test Runs from a given context. With this endpoint you can obtain all the Test Runs (paginated) in one of the following contexts: - In a Test Execution issue. A Test issue key can be used in order to return a single TestRun from the Test Execution issue - In a Test Plan issue - In a JQL filter that returns several Test Execution issue  In case the Test Run has iterations, steps will not appear. However, if the Test has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param testExecKey The Test Execution issue key (optional)
     * @param testKey The Test issue key (may only be used when using the \&quot;testExecKey\&quot;  param) (optional)
     * @param testPlanKey The Test Plan issue key (optional)
     * @param includeTestFields List of custom fields of the Test issue to be return in the responde (several custom fields can be requested by separating them with &#39;,&#39;) (optional)
     * @param savedFilterId The Jira JQL filter ID or name containing Test Executions issues (optional)
     * @param limit The number of maximum Test Runs to be returned (optional)
     * @param page The number of the results page (optional)
     * @return ApiResponse&lt;Set&lt;InlineResponse2001&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Set<InlineResponse2001>> getTestrunsWithHttpInfo(String testExecKey, String testKey, String testPlanKey, String includeTestFields, String savedFilterId, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getTestrunsValidateBeforeCall(testExecKey, testKey, testPlanKey, includeTestFields, savedFilterId, limit, page, null);
        Type localVarReturnType = new TypeToken<Set<InlineResponse2001>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the Test Runs from a given context. With this endpoint you can obtain all the Test Runs (paginated) in one of the following contexts: - In a Test Execution issue. A Test issue key can be used in order to return a single TestRun from the Test Execution issue - In a Test Plan issue - In a JQL filter that returns several Test Execution issue  In case the Test Run has iterations, steps will not appear. However, if the Test has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param testExecKey The Test Execution issue key (optional)
     * @param testKey The Test issue key (may only be used when using the \&quot;testExecKey\&quot;  param) (optional)
     * @param testPlanKey The Test Plan issue key (optional)
     * @param includeTestFields List of custom fields of the Test issue to be return in the responde (several custom fields can be requested by separating them with &#39;,&#39;) (optional)
     * @param savedFilterId The Jira JQL filter ID or name containing Test Executions issues (optional)
     * @param limit The number of maximum Test Runs to be returned (optional)
     * @param page The number of the results page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTestrunsAsync(String testExecKey, String testKey, String testPlanKey, String includeTestFields, String savedFilterId, Integer limit, Integer page, final ApiCallback<Set<InlineResponse2001>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestrunsValidateBeforeCall(testExecKey, testKey, testPlanKey, includeTestFields, savedFilterId, limit, page, _callback);
        Type localVarReturnType = new TypeToken<Set<InlineResponse2001>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunGet
     * @param testExecIssueKey The key of the Test Execution (required)
     * @param testIssueKey The key of the Test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body containg the Test Run information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunGetCall(String testExecIssueKey, String testIssueKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testExecIssueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testExecIssueKey", testExecIssueKey));
        }

        if (testIssueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testIssueKey", testIssueKey));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunGetValidateBeforeCall(String testExecIssueKey, String testIssueKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testExecIssueKey' is set
        if (testExecIssueKey == null) {
            throw new ApiException("Missing the required parameter 'testExecIssueKey' when calling testrunGet(Async)");
        }
        
        // verify the required parameter 'testIssueKey' is set
        if (testIssueKey == null) {
            throw new ApiException("Missing the required parameter 'testIssueKey' when calling testrunGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunGetCall(testExecIssueKey, testIssueKey, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param testExecIssueKey The key of the Test Execution (required)
     * @param testIssueKey The key of the Test (required)
     * @return TestRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body containg the Test Run information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public TestRunResponse testrunGet(String testExecIssueKey, String testIssueKey) throws ApiException {
        ApiResponse<TestRunResponse> localVarResp = testrunGetWithHttpInfo(testExecIssueKey, testIssueKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param testExecIssueKey The key of the Test Execution (required)
     * @param testIssueKey The key of the Test (required)
     * @return ApiResponse&lt;TestRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body containg the Test Run information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRunResponse> testrunGetWithHttpInfo(String testExecIssueKey, String testIssueKey) throws ApiException {
        okhttp3.Call localVarCall = testrunGetValidateBeforeCall(testExecIssueKey, testIssueKey, null);
        Type localVarReturnType = new TypeToken<TestRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param testExecIssueKey The key of the Test Execution (required)
     * @param testIssueKey The key of the Test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body containg the Test Run information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunGetAsync(String testExecIssueKey, String testIssueKey, final ApiCallback<TestRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunGetValidateBeforeCall(testExecIssueKey, testIssueKey, _callback);
        Type localVarReturnType = new TypeToken<TestRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdCustomfieldCustomFieldIdGet
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns the value of the custom field for the given Test Run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdCustomfieldCustomFieldIdGetCall(String id, String customFieldId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/customfield/{customFieldId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "customFieldId" + "\\}", localVarApiClient.escapeString(customFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdCustomfieldCustomFieldIdGetValidateBeforeCall(String id, String customFieldId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdCustomfieldCustomFieldIdGet(Async)");
        }
        
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling testrunIdCustomfieldCustomFieldIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdCustomfieldCustomFieldIdGetCall(id, customFieldId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a Test Run Custom Field, given the Test Run and the Test Run Custom Field ids.
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @return TestRunCustomFieldResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns the value of the custom field for the given Test Run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TestRunCustomFieldResponse testrunIdCustomfieldCustomFieldIdGet(String id, String customFieldId) throws ApiException {
        ApiResponse<TestRunCustomFieldResponse> localVarResp = testrunIdCustomfieldCustomFieldIdGetWithHttpInfo(id, customFieldId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a Test Run Custom Field, given the Test Run and the Test Run Custom Field ids.
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @return ApiResponse&lt;TestRunCustomFieldResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns the value of the custom field for the given Test Run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRunCustomFieldResponse> testrunIdCustomfieldCustomFieldIdGetWithHttpInfo(String id, String customFieldId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdCustomfieldCustomFieldIdGetValidateBeforeCall(id, customFieldId, null);
        Type localVarReturnType = new TypeToken<TestRunCustomFieldResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a Test Run Custom Field, given the Test Run and the Test Run Custom Field ids.
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns the value of the custom field for the given Test Run. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdCustomfieldCustomFieldIdGetAsync(String id, String customFieldId, final ApiCallback<TestRunCustomFieldResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdCustomfieldCustomFieldIdGetValidateBeforeCall(id, customFieldId, _callback);
        Type localVarReturnType = new TypeToken<TestRunCustomFieldResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdCustomfieldCustomFieldIdPut
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @param UNKNOWN_BASE_TYPE  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdCustomfieldCustomFieldIdPutCall(String id, String customFieldId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UNKNOWN_BASE_TYPE;

        // create path and map variables
        String localVarPath = "/testrun/{id}/customfield/{customFieldId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "customFieldId" + "\\}", localVarApiClient.escapeString(customFieldId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdCustomfieldCustomFieldIdPutValidateBeforeCall(String id, String customFieldId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdCustomfieldCustomFieldIdPut(Async)");
        }
        
        // verify the required parameter 'customFieldId' is set
        if (customFieldId == null) {
            throw new ApiException("Missing the required parameter 'customFieldId' when calling testrunIdCustomfieldCustomFieldIdPut(Async)");
        }
        
        // verify the required parameter 'UNKNOWN_BASE_TYPE' is set
        if (UNKNOWN_BASE_TYPE == null) {
            throw new ApiException("Missing the required parameter 'UNKNOWN_BASE_TYPE' when calling testrunIdCustomfieldCustomFieldIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdCustomfieldCustomFieldIdPutCall(id, customFieldId, UNKNOWN_BASE_TYPE, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the value of a test run custom field, given the Test Run and the Test Run Custom Field ids. The custom field value should be a valid value according to the field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @param UNKNOWN_BASE_TYPE  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void testrunIdCustomfieldCustomFieldIdPut(String id, String customFieldId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        testrunIdCustomfieldCustomFieldIdPutWithHttpInfo(id, customFieldId, UNKNOWN_BASE_TYPE);
    }

    /**
     * 
     * Updates the value of a test run custom field, given the Test Run and the Test Run Custom Field ids. The custom field value should be a valid value according to the field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @param UNKNOWN_BASE_TYPE  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testrunIdCustomfieldCustomFieldIdPutWithHttpInfo(String id, String customFieldId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE) throws ApiException {
        okhttp3.Call localVarCall = testrunIdCustomfieldCustomFieldIdPutValidateBeforeCall(id, customFieldId, UNKNOWN_BASE_TYPE, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the value of a test run custom field, given the Test Run and the Test Run Custom Field ids. The custom field value should be a valid value according to the field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param customFieldId The id of the Test Run Custom Field (required)
     * @param UNKNOWN_BASE_TYPE  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdCustomfieldCustomFieldIdPutAsync(String id, String customFieldId, UNKNOWN_BASE_TYPE UNKNOWN_BASE_TYPE, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdCustomfieldCustomFieldIdPutValidateBeforeCall(id, customFieldId, UNKNOWN_BASE_TYPE, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdGet
     * @param id The id of the Test Run (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @return TestRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TestRunResponse testrunIdGet(String id) throws ApiException {
        ApiResponse<TestRunResponse> localVarResp = testrunIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @return ApiResponse&lt;TestRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRunResponse> testrunIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = testrunIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TestRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a Test Run given the Test Execution and Test keys. &lt;br/&gt; The response will contain all information related to a Test Run, e.g., status, created and finish dates, step results, test environments, defects, Test Run Custom fields, and so on. &lt;br/&gt;  In case the Test Run has iterations, steps will not appear. However, if it has parameters but executed one time, it will show the steps and the parameters info. &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdGetAsync(String id, final ApiCallback<TestRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TestRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdGet
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdGetCall(String id, String iterationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdGetValidateBeforeCall(String id, String iterationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdGet(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdGetCall(id, iterationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves an iteration given the Test Run id and the id of the iteration. &lt;br/&gt; The response will contain all the information regarding the iteration (status, parameters, and the steps). The steps will appear with the parameters converted to their value if the resolved dataset does not have a parameter referenced on a  step it will be displayed like ${parameter_name}. &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @return TestRunIterationInformation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public TestRunIterationInformation testrunIdIterationIterationIdGet(String id, String iterationId) throws ApiException {
        ApiResponse<TestRunIterationInformation> localVarResp = testrunIdIterationIterationIdGetWithHttpInfo(id, iterationId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves an iteration given the Test Run id and the id of the iteration. &lt;br/&gt; The response will contain all the information regarding the iteration (status, parameters, and the steps). The steps will appear with the parameters converted to their value if the resolved dataset does not have a parameter referenced on a  step it will be displayed like ${parameter_name}. &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @return ApiResponse&lt;TestRunIterationInformation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestRunIterationInformation> testrunIdIterationIterationIdGetWithHttpInfo(String id, String iterationId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdGetValidateBeforeCall(id, iterationId, null);
        Type localVarReturnType = new TypeToken<TestRunIterationInformation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves an iteration given the Test Run id and the id of the iteration. &lt;br/&gt; The response will contain all the information regarding the iteration (status, parameters, and the steps). The steps will appear with the parameters converted to their value if the resolved dataset does not have a parameter referenced on a  step it will be displayed like ${parameter_name}. &lt;br/&gt;
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdGetAsync(String id, String iterationId, final ApiCallback<TestRunIterationInformation> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdGetValidateBeforeCall(id, iterationId, _callback);
        Type localVarReturnType = new TypeToken<TestRunIterationInformation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdPut
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param updateIteration  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdPutCall(String id, String iterationId, UpdateIteration updateIteration, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateIteration;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdPutValidateBeforeCall(String id, String iterationId, UpdateIteration updateIteration, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdPut(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdPut(Async)");
        }
        
        // verify the required parameter 'updateIteration' is set
        if (updateIteration == null) {
            throw new ApiException("Missing the required parameter 'updateIteration' when calling testrunIdIterationIterationIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdPutCall(id, iterationId, updateIteration, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update all values from an iteration in a Test Run.&lt;br/&gt; The user can update the iteration status and the Test Step results of that iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param updateIteration  (required)
     * @return UpdateIterationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateIterationResponse testrunIdIterationIterationIdPut(String id, String iterationId, UpdateIteration updateIteration) throws ApiException {
        ApiResponse<UpdateIterationResponse> localVarResp = testrunIdIterationIterationIdPutWithHttpInfo(id, iterationId, updateIteration);
        return localVarResp.getData();
    }

    /**
     * 
     * Update all values from an iteration in a Test Run.&lt;br/&gt; The user can update the iteration status and the Test Step results of that iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param updateIteration  (required)
     * @return ApiResponse&lt;UpdateIterationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateIterationResponse> testrunIdIterationIterationIdPutWithHttpInfo(String id, String iterationId, UpdateIteration updateIteration) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdPutValidateBeforeCall(id, iterationId, updateIteration, null);
        Type localVarReturnType = new TypeToken<UpdateIterationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update all values from an iteration in a Test Run.&lt;br/&gt; The user can update the iteration status and the Test Step results of that iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param updateIteration  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdPutAsync(String id, String iterationId, UpdateIteration updateIteration, final ApiCallback<UpdateIterationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdPutValidateBeforeCall(id, iterationId, updateIteration, _callback);
        Type localVarReturnType = new TypeToken<UpdateIterationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepGet
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepGetCall(String id, String iterationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepGetValidateBeforeCall(String id, String iterationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepGet(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepGetCall(id, iterationId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves all Test Step results for the given iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @return List&lt;StepResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<StepResult> testrunIdIterationIterationIdStepGet(String id, String iterationId) throws ApiException {
        ApiResponse<List<StepResult>> localVarResp = testrunIdIterationIterationIdStepGetWithHttpInfo(id, iterationId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all Test Step results for the given iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @return ApiResponse&lt;List&lt;StepResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StepResult>> testrunIdIterationIterationIdStepGetWithHttpInfo(String id, String iterationId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepGetValidateBeforeCall(id, iterationId, null);
        Type localVarReturnType = new TypeToken<List<StepResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all Test Step results for the given iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepGetAsync(String id, String iterationId, final ApiCallback<List<StepResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepGetValidateBeforeCall(id, iterationId, _callback);
        Type localVarReturnType = new TypeToken<List<StepResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param attachmentId The id of the attachment to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteCall(String id, String iterationId, String stepResultId, String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}/attachment/{attachmentId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteValidateBeforeCall(String id, String iterationId, String stepResultId, String attachmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteCall(id, iterationId, stepResultId, attachmentId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove an evidence from a Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param attachmentId The id of the attachment to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDelete(String id, String iterationId, String stepResultId, String attachmentId) throws ApiException {
        testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteWithHttpInfo(id, iterationId, stepResultId, attachmentId);
    }

    /**
     * 
     * Remove an evidence from a Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param attachmentId The id of the attachment to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteWithHttpInfo(String id, String iterationId, String stepResultId, String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteValidateBeforeCall(id, iterationId, stepResultId, attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove an evidence from a Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param attachmentId The id of the attachment to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteAsync(String id, String iterationId, String stepResultId, String attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentAttachmentIdDeleteValidateBeforeCall(id, iterationId, stepResultId, attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdAttachmentDelete
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param filename The name of the attachment to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteCall(String id, String iterationId, String stepResultId, String filename, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}/attachment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteValidateBeforeCall(String id, String iterationId, String stepResultId, String filename, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentDelete(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentDelete(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentDelete(Async)");
        }
        
        // verify the required parameter 'filename' is set
        if (filename == null) {
            throw new ApiException("Missing the required parameter 'filename' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentDelete(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteCall(id, iterationId, stepResultId, filename, _callback);
        return localVarCall;

    }

    /**
     * 
     * Remove all evidences with the same filename from the Test step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param filename The name of the attachment to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentDelete(String id, String iterationId, String stepResultId, String filename) throws ApiException {
        testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteWithHttpInfo(id, iterationId, stepResultId, filename);
    }

    /**
     * 
     * Remove all evidences with the same filename from the Test step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param filename The name of the attachment to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteWithHttpInfo(String id, String iterationId, String stepResultId, String filename) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteValidateBeforeCall(id, iterationId, stepResultId, filename, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove all evidences with the same filename from the Test step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param filename The name of the attachment to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteAsync(String id, String iterationId, String stepResultId, String filename, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentDeleteValidateBeforeCall(id, iterationId, stepResultId, filename, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdAttachmentGet
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentGetCall(String id, String iterationId, String stepResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}/attachment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentGetValidateBeforeCall(String id, String iterationId, String stepResultId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentGet(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentGet(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentGetCall(id, iterationId, stepResultId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Return a json that contains an array with all the execution evidences the Test Step has within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @return List&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public List<FileResponse> testrunIdIterationIterationIdStepStepResultIdAttachmentGet(String id, String iterationId, String stepResultId) throws ApiException {
        ApiResponse<List<FileResponse>> localVarResp = testrunIdIterationIterationIdStepStepResultIdAttachmentGetWithHttpInfo(id, iterationId, stepResultId);
        return localVarResp.getData();
    }

    /**
     * 
     * Return a json that contains an array with all the execution evidences the Test Step has within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @return ApiResponse&lt;List&lt;FileResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileResponse>> testrunIdIterationIterationIdStepStepResultIdAttachmentGetWithHttpInfo(String id, String iterationId, String stepResultId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentGetValidateBeforeCall(id, iterationId, stepResultId, null);
        Type localVarReturnType = new TypeToken<List<FileResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return a json that contains an array with all the execution evidences the Test Step has within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentGetAsync(String id, String iterationId, String stepResultId, final ApiCallback<List<FileResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentGetValidateBeforeCall(id, iterationId, stepResultId, _callback);
        Type localVarReturnType = new TypeToken<List<FileResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdAttachmentPost
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param testStepResultEvidenceInput  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentPostCall(String id, String iterationId, String stepResultId, TestStepResultEvidenceInput testStepResultEvidenceInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testStepResultEvidenceInput;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}/attachment"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentPostValidateBeforeCall(String id, String iterationId, String stepResultId, TestStepResultEvidenceInput testStepResultEvidenceInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentPost(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentPost(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdAttachmentPost(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentPostCall(id, iterationId, stepResultId, testStepResultEvidenceInput, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add a new evidence to the Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param testStepResultEvidenceInput  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void testrunIdIterationIterationIdStepStepResultIdAttachmentPost(String id, String iterationId, String stepResultId, TestStepResultEvidenceInput testStepResultEvidenceInput) throws ApiException {
        testrunIdIterationIterationIdStepStepResultIdAttachmentPostWithHttpInfo(id, iterationId, stepResultId, testStepResultEvidenceInput);
    }

    /**
     * 
     * Add a new evidence to the Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param testStepResultEvidenceInput  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testrunIdIterationIterationIdStepStepResultIdAttachmentPostWithHttpInfo(String id, String iterationId, String stepResultId, TestStepResultEvidenceInput testStepResultEvidenceInput) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentPostValidateBeforeCall(id, iterationId, stepResultId, testStepResultEvidenceInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a new evidence to the Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param testStepResultEvidenceInput  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdAttachmentPostAsync(String id, String iterationId, String stepResultId, TestStepResultEvidenceInput testStepResultEvidenceInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdAttachmentPostValidateBeforeCall(id, iterationId, stepResultId, testStepResultEvidenceInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdGet
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdGetCall(String id, String iterationId, String stepResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdGetValidateBeforeCall(String id, String iterationId, String stepResultId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdGet(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdGet(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdGetCall(id, iterationId, stepResultId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves all the information for the given Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @return StepResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public StepResult testrunIdIterationIterationIdStepStepResultIdGet(String id, String iterationId, String stepResultId) throws ApiException {
        ApiResponse<StepResult> localVarResp = testrunIdIterationIterationIdStepStepResultIdGetWithHttpInfo(id, iterationId, stepResultId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves all the information for the given Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @return ApiResponse&lt;StepResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StepResult> testrunIdIterationIterationIdStepStepResultIdGetWithHttpInfo(String id, String iterationId, String stepResultId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdGetValidateBeforeCall(id, iterationId, stepResultId, null);
        Type localVarReturnType = new TypeToken<StepResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves all the information for the given Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdGetAsync(String id, String iterationId, String stepResultId, final ApiCallback<StepResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdGetValidateBeforeCall(id, iterationId, stepResultId, _callback);
        Type localVarReturnType = new TypeToken<StepResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdPut
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param updateStepResult  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdPutCall(String id, String iterationId, String stepResultId, UpdateStepResult updateStepResult, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStepResult;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdPutValidateBeforeCall(String id, String iterationId, String stepResultId, UpdateStepResult updateStepResult, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdPut(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdPut(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdPut(Async)");
        }
        
        // verify the required parameter 'updateStepResult' is set
        if (updateStepResult == null) {
            throw new ApiException("Missing the required parameter 'updateStepResult' when calling testrunIdIterationIterationIdStepStepResultIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdPutCall(id, iterationId, stepResultId, updateStepResult, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param updateStepResult  (required)
     * @return StepResultsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public StepResultsResponse testrunIdIterationIterationIdStepStepResultIdPut(String id, String iterationId, String stepResultId, UpdateStepResult updateStepResult) throws ApiException {
        ApiResponse<StepResultsResponse> localVarResp = testrunIdIterationIterationIdStepStepResultIdPutWithHttpInfo(id, iterationId, stepResultId, updateStepResult);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param updateStepResult  (required)
     * @return ApiResponse&lt;StepResultsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StepResultsResponse> testrunIdIterationIterationIdStepStepResultIdPutWithHttpInfo(String id, String iterationId, String stepResultId, UpdateStepResult updateStepResult) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdPutValidateBeforeCall(id, iterationId, stepResultId, updateStepResult, null);
        Type localVarReturnType = new TypeToken<StepResultsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the Test Step result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param updateStepResult  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdPutAsync(String id, String iterationId, String stepResultId, UpdateStepResult updateStepResult, final ApiCallback<StepResultsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdPutValidateBeforeCall(id, iterationId, stepResultId, updateStepResult, _callback);
        Type localVarReturnType = new TypeToken<StepResultsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdStatusGet
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdStatusGetCall(String id, String iterationId, String stepResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}/status"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdStatusGetValidateBeforeCall(String id, String iterationId, String stepResultId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdStatusGet(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdStatusGet(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdStatusGet(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdStatusGetCall(id, iterationId, stepResultId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves the Test Step status of a Test Step Result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public InlineResponse200 testrunIdIterationIterationIdStepStepResultIdStatusGet(String id, String iterationId, String stepResultId) throws ApiException {
        ApiResponse<InlineResponse200> localVarResp = testrunIdIterationIterationIdStepStepResultIdStatusGetWithHttpInfo(id, iterationId, stepResultId);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the Test Step status of a Test Step Result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InlineResponse200> testrunIdIterationIterationIdStepStepResultIdStatusGetWithHttpInfo(String id, String iterationId, String stepResultId) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdStatusGetValidateBeforeCall(id, iterationId, stepResultId, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the Test Step status of a Test Step Result within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdStatusGetAsync(String id, String iterationId, String stepResultId, final ApiCallback<InlineResponse200> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdStatusGetValidateBeforeCall(id, iterationId, stepResultId, _callback);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdIterationIterationIdStepStepResultIdStatusPut
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param status The status we want the test step to have (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdStatusPutCall(String id, String iterationId, String stepResultId, String status, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testrun/{id}/iteration/{iterationId}/step/{stepResultId}/status"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()))
            .replaceAll("\\{" + "iterationId" + "\\}", localVarApiClient.escapeString(iterationId.toString()))
            .replaceAll("\\{" + "stepResultId" + "\\}", localVarApiClient.escapeString(stepResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (status != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("status", status));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdIterationIterationIdStepStepResultIdStatusPutValidateBeforeCall(String id, String iterationId, String stepResultId, String status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdIterationIterationIdStepStepResultIdStatusPut(Async)");
        }
        
        // verify the required parameter 'iterationId' is set
        if (iterationId == null) {
            throw new ApiException("Missing the required parameter 'iterationId' when calling testrunIdIterationIterationIdStepStepResultIdStatusPut(Async)");
        }
        
        // verify the required parameter 'stepResultId' is set
        if (stepResultId == null) {
            throw new ApiException("Missing the required parameter 'stepResultId' when calling testrunIdIterationIterationIdStepStepResultIdStatusPut(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling testrunIdIterationIterationIdStepStepResultIdStatusPut(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdStatusPutCall(id, iterationId, stepResultId, status, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the Test Step status within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param status The status we want the test step to have (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public void testrunIdIterationIterationIdStepStepResultIdStatusPut(String id, String iterationId, String stepResultId, String status) throws ApiException {
        testrunIdIterationIterationIdStepStepResultIdStatusPutWithHttpInfo(id, iterationId, stepResultId, status);
    }

    /**
     * 
     * Updates the Test Step status within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param status The status we want the test step to have (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testrunIdIterationIterationIdStepStepResultIdStatusPutWithHttpInfo(String id, String iterationId, String stepResultId, String status) throws ApiException {
        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdStatusPutValidateBeforeCall(id, iterationId, stepResultId, status, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Updates the Test Step status within an iteration.
     * @param id The id of the Test Run (required)
     * @param iterationId The id of the iteration (required)
     * @param stepResultId The id of the Test Step result (required)
     * @param status The status we want the test step to have (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdIterationIterationIdStepStepResultIdStatusPutAsync(String id, String iterationId, String stepResultId, String status, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdIterationIterationIdStepStepResultIdStatusPutValidateBeforeCall(id, iterationId, stepResultId, status, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testrunIdPut
     * @param id The id of the Test Run (required)
     * @param updateTestRun  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, some custom field has an invalid value, or the user does not have permissions to execute the Test Run. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdPutCall(String id, UpdateTestRun updateTestRun, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTestRun;

        // create path and map variables
        String localVarPath = "/testrun/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testrunIdPutValidateBeforeCall(String id, UpdateTestRun updateTestRun, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testrunIdPut(Async)");
        }
        
        // verify the required parameter 'updateTestRun' is set
        if (updateTestRun == null) {
            throw new ApiException("Missing the required parameter 'updateTestRun' when calling testrunIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = testrunIdPutCall(id, updateTestRun, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update all the values of a Test Run.&lt;br/&gt; The user can update the values of the overall status, step results, assignee, test environments, add defects and evidences and so on. &lt;br/&gt; &lt;br/&gt; To update the value of a Test Run custom field, the id of the field must be provided as well as a valid value for that custom field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt; Also, **it is not possible to change the Test Run to a final status when there are required Test Run custom fields with empty values.** &lt;br/&gt; &lt;br/&gt; In the case of a Test Run of a manual Test type, it is possible to update the steps only if there are zero or one iterations. If there are multiple iterations, it is not possible to update the steps through this endpoint, only the iterations.
     * @param id The id of the Test Run (required)
     * @param updateTestRun  (required)
     * @return UpdateTestRunResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, some custom field has an invalid value, or the user does not have permissions to execute the Test Run. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTestRunResponse testrunIdPut(String id, UpdateTestRun updateTestRun) throws ApiException {
        ApiResponse<UpdateTestRunResponse> localVarResp = testrunIdPutWithHttpInfo(id, updateTestRun);
        return localVarResp.getData();
    }

    /**
     * 
     * Update all the values of a Test Run.&lt;br/&gt; The user can update the values of the overall status, step results, assignee, test environments, add defects and evidences and so on. &lt;br/&gt; &lt;br/&gt; To update the value of a Test Run custom field, the id of the field must be provided as well as a valid value for that custom field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt; Also, **it is not possible to change the Test Run to a final status when there are required Test Run custom fields with empty values.** &lt;br/&gt; &lt;br/&gt; In the case of a Test Run of a manual Test type, it is possible to update the steps only if there are zero or one iterations. If there are multiple iterations, it is not possible to update the steps through this endpoint, only the iterations.
     * @param id The id of the Test Run (required)
     * @param updateTestRun  (required)
     * @return ApiResponse&lt;UpdateTestRunResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, some custom field has an invalid value, or the user does not have permissions to execute the Test Run. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTestRunResponse> testrunIdPutWithHttpInfo(String id, UpdateTestRun updateTestRun) throws ApiException {
        okhttp3.Call localVarCall = testrunIdPutValidateBeforeCall(id, updateTestRun, null);
        Type localVarReturnType = new TypeToken<UpdateTestRunResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update all the values of a Test Run.&lt;br/&gt; The user can update the values of the overall status, step results, assignee, test environments, add defects and evidences and so on. &lt;br/&gt; &lt;br/&gt; To update the value of a Test Run custom field, the id of the field must be provided as well as a valid value for that custom field type. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_  &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; An error will be returned when there are invalid custom field values. It is also possible to delete a Test Run custom field value by providing a _null_ or empty value (e.g., _\&quot;\&quot;_ or _[]_). **It is not possible to delete a value of a required Test Run Custom Field value.** &lt;br/&gt; Also, **it is not possible to change the Test Run to a final status when there are required Test Run custom fields with empty values.** &lt;br/&gt; &lt;br/&gt; In the case of a Test Run of a manual Test type, it is possible to update the steps only if there are zero or one iterations. If there are multiple iterations, it is not possible to update the steps through this endpoint, only the iterations.
     * @param id The id of the Test Run (required)
     * @param updateTestRun  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, some custom field has an invalid value, or the user does not have permissions to execute the Test Run. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testrunIdPutAsync(String id, UpdateTestRun updateTestRun, final ApiCallback<UpdateTestRunResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testrunIdPutValidateBeforeCall(id, updateTestRun, _callback);
        Type localVarReturnType = new TypeToken<UpdateTestRunResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
