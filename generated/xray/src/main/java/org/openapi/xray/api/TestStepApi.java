/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.api;

import org.openapi.xray.invoker.ApiCallback;
import org.openapi.xray.invoker.ApiClient;
import org.openapi.xray.invoker.ApiException;
import org.openapi.xray.invoker.ApiResponse;
import org.openapi.xray.invoker.Configuration;
import org.openapi.xray.invoker.Pair;
import org.openapi.xray.invoker.ProgressRequestBody;
import org.openapi.xray.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.xray.model.CreateStepRequestBody;
import org.openapi.xray.model.CreateStepResponse;
import org.openapi.xray.model.Error;
import org.openapi.xray.model.FileResponse;
import org.openapi.xray.model.StepResponse;
import org.openapi.xray.model.TestStepsResponse;
import org.openapi.xray.model.UpdateStepRequestBody;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestStepApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestStepApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestStepApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for testTestKeyStepsGet
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsGetCall(String testKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsGetValidateBeforeCall(String testKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsGet(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsGetCall(testKey, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all the steps of a test issue given the key. The response contains for each step the corresponding id, index, fields and the attachments. &lt;br /&gt; &lt;br /&gt; The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). &lt;br /&gt; &lt;br /&gt; The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value).
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @return TestStepsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public TestStepsResponse testTestKeyStepsGet(String testKey) throws ApiException {
        ApiResponse<TestStepsResponse> localVarResp = testTestKeyStepsGetWithHttpInfo(testKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the steps of a test issue given the key. The response contains for each step the corresponding id, index, fields and the attachments. &lt;br /&gt; &lt;br /&gt; The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). &lt;br /&gt; &lt;br /&gt; The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value).
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @return ApiResponse&lt;TestStepsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TestStepsResponse> testTestKeyStepsGetWithHttpInfo(String testKey) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsGetValidateBeforeCall(testKey, null);
        Type localVarReturnType = new TypeToken<TestStepsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the steps of a test issue given the key. The response contains for each step the corresponding id, index, fields and the attachments. &lt;br /&gt; &lt;br /&gt; The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). &lt;br /&gt; &lt;br /&gt; The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value).
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsGetAsync(String testKey, final ApiCallback<TestStepsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsGetValidateBeforeCall(testKey, _callback);
        Type localVarReturnType = new TypeToken<TestStepsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTestKeyStepsPost
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param createStepRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. The response returns the id of the created steps as well as a list containing the attachments ids. Furthermore, the response contains a list of warning with some errors that may occur during the step creation, e.g., some attachment is not successfull created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsPostCall(String testKey, CreateStepRequestBody createStepRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createStepRequestBody;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsPostValidateBeforeCall(String testKey, CreateStepRequestBody createStepRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsPost(Async)");
        }
        
        // verify the required parameter 'createStepRequestBody' is set
        if (createStepRequestBody == null) {
            throw new ApiException("Missing the required parameter 'createStepRequestBody' when calling testTestKeyStepsPost(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsPostCall(testKey, createStepRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Create a new test step. All step fields values are listed under _fields_ and identified by the name and a list of attachments to add to the step. The field values should follow a certain format according to the custom field type. &lt;br /&gt;&lt;br /&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_ &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; The remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\&quot;Perform Action B\&quot;_. &lt;br /&gt;&lt;br /&gt; If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. Furthermore, **all required step fields must be provided**.
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param createStepRequestBody  (required)
     * @return CreateStepResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. The response returns the id of the created steps as well as a list containing the attachments ids. Furthermore, the response contains a list of warning with some errors that may occur during the step creation, e.g., some attachment is not successfull created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public CreateStepResponse testTestKeyStepsPost(String testKey, CreateStepRequestBody createStepRequestBody) throws ApiException {
        ApiResponse<CreateStepResponse> localVarResp = testTestKeyStepsPostWithHttpInfo(testKey, createStepRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Create a new test step. All step fields values are listed under _fields_ and identified by the name and a list of attachments to add to the step. The field values should follow a certain format according to the custom field type. &lt;br /&gt;&lt;br /&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_ &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; The remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\&quot;Perform Action B\&quot;_. &lt;br /&gt;&lt;br /&gt; If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. Furthermore, **all required step fields must be provided**.
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param createStepRequestBody  (required)
     * @return ApiResponse&lt;CreateStepResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. The response returns the id of the created steps as well as a list containing the attachments ids. Furthermore, the response contains a list of warning with some errors that may occur during the step creation, e.g., some attachment is not successfull created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStepResponse> testTestKeyStepsPostWithHttpInfo(String testKey, CreateStepRequestBody createStepRequestBody) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsPostValidateBeforeCall(testKey, createStepRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateStepResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create a new test step. All step fields values are listed under _fields_ and identified by the name and a list of attachments to add to the step. The field values should follow a certain format according to the custom field type. &lt;br /&gt;&lt;br /&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_ &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; The remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\&quot;Perform Action B\&quot;_. &lt;br /&gt;&lt;br /&gt; If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. Furthermore, **all required step fields must be provided**.
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param createStepRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful operation. The response returns the id of the created steps as well as a list containing the attachments ids. Furthermore, the response contains a list of warning with some errors that may occur during the step creation, e.g., some attachment is not successfull created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsPostAsync(String testKey, CreateStepRequestBody createStepRequestBody, final ApiCallback<CreateStepResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsPostValidateBeforeCall(testKey, createStepRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateStepResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTestKeyStepsStepIdAttachmentAttachmentIdDelete
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @param attachmentId The id of the attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdAttachmentAttachmentIdDeleteCall(String testKey, Integer stepId, Integer attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps/{stepId}/attachment/{attachmentId}"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()))
            .replaceAll("\\{" + "attachmentId" + "\\}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsStepIdAttachmentAttachmentIdDeleteValidateBeforeCall(String testKey, Integer stepId, Integer attachmentId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsStepIdAttachmentAttachmentIdDelete(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling testTestKeyStepsStepIdAttachmentAttachmentIdDelete(Async)");
        }
        
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling testTestKeyStepsStepIdAttachmentAttachmentIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsStepIdAttachmentAttachmentIdDeleteCall(testKey, stepId, attachmentId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a test step attachment, given the test key and step and attachment ids.
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @param attachmentId The id of the attachment (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public void testTestKeyStepsStepIdAttachmentAttachmentIdDelete(String testKey, Integer stepId, Integer attachmentId) throws ApiException {
        testTestKeyStepsStepIdAttachmentAttachmentIdDeleteWithHttpInfo(testKey, stepId, attachmentId);
    }

    /**
     * 
     * Deletes a test step attachment, given the test key and step and attachment ids.
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @param attachmentId The id of the attachment (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testTestKeyStepsStepIdAttachmentAttachmentIdDeleteWithHttpInfo(String testKey, Integer stepId, Integer attachmentId) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsStepIdAttachmentAttachmentIdDeleteValidateBeforeCall(testKey, stepId, attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a test step attachment, given the test key and step and attachment ids.
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @param attachmentId The id of the attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdAttachmentAttachmentIdDeleteAsync(String testKey, Integer stepId, Integer attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsStepIdAttachmentAttachmentIdDeleteValidateBeforeCall(testKey, stepId, attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTestKeyStepsStepIdAttachmentsGet
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body with the attachments information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdAttachmentsGetCall(String testKey, Integer stepId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps/{stepId}/attachments"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsStepIdAttachmentsGetValidateBeforeCall(String testKey, Integer stepId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsStepIdAttachmentsGet(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling testTestKeyStepsStepIdAttachmentsGet(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsStepIdAttachmentsGetCall(testKey, stepId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns all the attachments of a test step, given the test key and step id.
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @return List&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body with the attachments information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public List<FileResponse> testTestKeyStepsStepIdAttachmentsGet(String testKey, Integer stepId) throws ApiException {
        ApiResponse<List<FileResponse>> localVarResp = testTestKeyStepsStepIdAttachmentsGetWithHttpInfo(testKey, stepId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all the attachments of a test step, given the test key and step id.
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @return ApiResponse&lt;List&lt;FileResponse&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body with the attachments information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FileResponse>> testTestKeyStepsStepIdAttachmentsGetWithHttpInfo(String testKey, Integer stepId) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsStepIdAttachmentsGetValidateBeforeCall(testKey, stepId, null);
        Type localVarReturnType = new TypeToken<List<FileResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all the attachments of a test step, given the test key and step id.
     * @param testKey Test with key CALC-123 does not exist or is not a manual test. (required)
     * @param stepId The id of the test step (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a body with the attachments information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdAttachmentsGetAsync(String testKey, Integer stepId, final ApiCallback<List<FileResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsStepIdAttachmentsGetValidateBeforeCall(testKey, stepId, _callback);
        Type localVarReturnType = new TypeToken<List<FileResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTestKeyStepsStepIdDelete
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdDeleteCall(String testKey, Integer stepId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps/{stepId}"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsStepIdDeleteValidateBeforeCall(String testKey, Integer stepId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsStepIdDelete(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling testTestKeyStepsStepIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsStepIdDeleteCall(testKey, stepId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Deletes a test step given the test key and the step id.
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public void testTestKeyStepsStepIdDelete(String testKey, Integer stepId) throws ApiException {
        testTestKeyStepsStepIdDeleteWithHttpInfo(testKey, stepId);
    }

    /**
     * 
     * Deletes a test step given the test key and the step id.
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> testTestKeyStepsStepIdDeleteWithHttpInfo(String testKey, Integer stepId) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsStepIdDeleteValidateBeforeCall(testKey, stepId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a test step given the test key and the step id.
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful operation. No content is returned. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdDeleteAsync(String testKey, Integer stepId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsStepIdDeleteValidateBeforeCall(testKey, stepId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTestKeyStepsStepIdGet
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdGetCall(String testKey, Integer stepId, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps/{stepId}"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsStepIdGetValidateBeforeCall(String testKey, Integer stepId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsStepIdGet(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling testTestKeyStepsStepIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsStepIdGetCall(testKey, stepId, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns the values of a single test step, given the test key and the step id. The response follows the same format as the previous endpoints, containing the step id, index, fields and the attachments. &lt;br /&gt; &lt;br /&gt; The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). &lt;br /&gt; &lt;br /&gt; The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value).
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @return StepResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public StepResponse testTestKeyStepsStepIdGet(String testKey, Integer stepId) throws ApiException {
        ApiResponse<StepResponse> localVarResp = testTestKeyStepsStepIdGetWithHttpInfo(testKey, stepId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the values of a single test step, given the test key and the step id. The response follows the same format as the previous endpoints, containing the step id, index, fields and the attachments. &lt;br /&gt; &lt;br /&gt; The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). &lt;br /&gt; &lt;br /&gt; The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value).
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @return ApiResponse&lt;StepResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StepResponse> testTestKeyStepsStepIdGetWithHttpInfo(String testKey, Integer stepId) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsStepIdGetValidateBeforeCall(testKey, stepId, null);
        Type localVarReturnType = new TypeToken<StepResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the values of a single test step, given the test key and the step id. The response follows the same format as the previous endpoints, containing the step id, index, fields and the attachments. &lt;br /&gt; &lt;br /&gt; The Test Step fields are identified by their name and can be of type _Data_ (Toggle, Number, Date and Date Time fields), _Option_ (Single Select, Multiple Select and Radio Button fields), _Wiki_ (Native fields, Single and Multiple Line fields). &lt;br /&gt; &lt;br /&gt; The value of step fields of type _Wiki_ have a raw and rendered value. _Option_ fields value will be an array containing the information of the selected options (the option id and its value).
     * @param testKey The key of the test issue, e.g., CALC-562 (required)
     * @param stepId The id of the test step (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdGetAsync(String testKey, Integer stepId, final ApiCallback<StepResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsStepIdGetValidateBeforeCall(testKey, stepId, _callback);
        Type localVarReturnType = new TypeToken<StepResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for testTestKeyStepsStepIdPut
     * @param testKey Test Key (required)
     * @param stepId The id of the test step (required)
     * @param updateStepRequestBody  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdPutCall(String testKey, Integer stepId, UpdateStepRequestBody updateStepRequestBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateStepRequestBody;

        // create path and map variables
        String localVarPath = "/test/{testKey}/steps/{stepId}"
            .replaceAll("\\{" + "testKey" + "\\}", localVarApiClient.escapeString(testKey.toString()))
            .replaceAll("\\{" + "stepId" + "\\}", localVarApiClient.escapeString(stepId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testTestKeyStepsStepIdPutValidateBeforeCall(String testKey, Integer stepId, UpdateStepRequestBody updateStepRequestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testKey' is set
        if (testKey == null) {
            throw new ApiException("Missing the required parameter 'testKey' when calling testTestKeyStepsStepIdPut(Async)");
        }
        
        // verify the required parameter 'stepId' is set
        if (stepId == null) {
            throw new ApiException("Missing the required parameter 'stepId' when calling testTestKeyStepsStepIdPut(Async)");
        }
        
        // verify the required parameter 'updateStepRequestBody' is set
        if (updateStepRequestBody == null) {
            throw new ApiException("Missing the required parameter 'updateStepRequestBody' when calling testTestKeyStepsStepIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = testTestKeyStepsStepIdPutCall(testKey, stepId, updateStepRequestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Updates the values of an existing test step, given the test key and step id. The user can update the field values and the attachments of a step. The values should follow a specific format similar to the step creation. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_ &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; The remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\&quot;Perform Action B\&quot;_. &lt;br /&gt;&lt;br /&gt; If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. A field value can be deleted sending an empty value, such as _\&quot;\&quot;_ or _[]_, or by sending _null_. **It is not possible to delete the value of a required field.**
     * @param testKey Test Key (required)
     * @param stepId The id of the test step (required)
     * @param updateStepRequestBody  (required)
     * @return CreateStepResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public CreateStepResponse testTestKeyStepsStepIdPut(String testKey, Integer stepId, UpdateStepRequestBody updateStepRequestBody) throws ApiException {
        ApiResponse<CreateStepResponse> localVarResp = testTestKeyStepsStepIdPutWithHttpInfo(testKey, stepId, updateStepRequestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the values of an existing test step, given the test key and step id. The user can update the field values and the attachments of a step. The values should follow a specific format similar to the step creation. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_ &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; The remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\&quot;Perform Action B\&quot;_. &lt;br /&gt;&lt;br /&gt; If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. A field value can be deleted sending an empty value, such as _\&quot;\&quot;_ or _[]_, or by sending _null_. **It is not possible to delete the value of a required field.**
     * @param testKey Test Key (required)
     * @param stepId The id of the test step (required)
     * @param updateStepRequestBody  (required)
     * @return ApiResponse&lt;CreateStepResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateStepResponse> testTestKeyStepsStepIdPutWithHttpInfo(String testKey, Integer stepId, UpdateStepRequestBody updateStepRequestBody) throws ApiException {
        okhttp3.Call localVarCall = testTestKeyStepsStepIdPutValidateBeforeCall(testKey, stepId, updateStepRequestBody, null);
        Type localVarReturnType = new TypeToken<CreateStepResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the values of an existing test step, given the test key and step id. The user can update the field values and the attachments of a step. The values should follow a specific format similar to the step creation. &lt;br/&gt;&lt;br/&gt; - **Toggle Fields** values should be _\&quot;true\&quot;_, _\&quot;false\&quot;_, _\&quot;0\&quot;_ or _\&quot;1\&quot;_ &lt;br /&gt;&lt;br /&gt; - **Number Fields** values should be a string containing a number, e.g. _\&quot;320\&quot;_. Decimal Number are also accepted,for instance, \&quot;320.5\&quot;. The decimal places are always separated by a _\&quot;.\&quot;_ &lt;br /&gt; &lt;br /&gt; - **Single Select and Radio Button Fields** values should be a single string containing the option value, e.g. _\&quot;Option A\&quot;_. The value should be a valid option for that custom field. The values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Multiple Select Fields** values should be an array of the string of option values, e.g. _[\&quot;Option A\&quot;, \&quot;Option B\&quot;]_. All the selected values should be valid for that custom field. The option values are not case sensitive. &lt;br /&gt;&lt;br /&gt; - **Date Fields** should follow the ISO format _yyyy-MM-dd_, where _yyyy_ represents the year, _MM_ the month in year and _dd_ the day in the month. For instance, a valid value would be _\&quot;2020-05-02\&quot;_. &lt;br /&gt;&lt;br /&gt; - **Date Time fields** should be in UTC following the ISO format _yyyy-MM-dd&#39;T&#39;HH:mm&#39;Z&#39;_. The date part follows the same date format, while _HH_ represents the hours (0-24), _mm_ the minutes in hour and _Z_ indicates the hour in UTC. For instance, a valid date time value would be _\&quot;2020-05-02T10:30Z\&quot;_. &lt;br /&gt;&lt;br /&gt; The remaining field types values do not required a specific validation. For instance, for a Single Line Custom field a valid value would be _\&quot;Perform Action B\&quot;_. &lt;br /&gt;&lt;br /&gt; If some value is not valid for a certain custom field type, an error will be return stating the field with the incorrect value. A field value can be deleted sending an empty value, such as _\&quot;\&quot;_ or _[]_, or by sending _null_. **It is not possible to delete the value of a required field.**
     * @param testKey Test Key (required)
     * @param stepId The id of the test step (required)
     * @param updateStepRequestBody  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request. Occurs when there is some error in the request, for instance, the test with provided key does not exist or some field has an invalid value (e.g. Option \&quot;A\&quot; does not exist for an option field). </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call testTestKeyStepsStepIdPutAsync(String testKey, Integer stepId, UpdateStepRequestBody updateStepRequestBody, final ApiCallback<CreateStepResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = testTestKeyStepsStepIdPutValidateBeforeCall(testKey, stepId, updateStepRequestBody, _callback);
        Type localVarReturnType = new TypeToken<CreateStepResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
