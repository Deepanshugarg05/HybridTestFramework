/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.api;

import org.openapi.xray.invoker.ApiCallback;
import org.openapi.xray.invoker.ApiClient;
import org.openapi.xray.invoker.ApiException;
import org.openapi.xray.invoker.ApiResponse;
import org.openapi.xray.invoker.Configuration;
import org.openapi.xray.invoker.Pair;
import org.openapi.xray.invoker.ProgressRequestBody;
import org.openapi.xray.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.xray.model.Error;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DatasetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DatasetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DatasetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for datasetExportGet
     * @param testIssueId The id of the test issue (optional)
     * @param testIssueKey The key of the test issue (optional)
     * @param contextIssueId The id of the context issue (Test Plan or Test Execution) (optional)
     * @param contextIssueKey The key of the context issue (Test Plan or Test Execution) (optional)
     * @param resolved A flag indicating of the dataset must be resolved or not for a given level (true by default) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a CSV file with the dataset information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetExportGetCall(String testIssueId, String testIssueKey, String contextIssueId, String contextIssueKey, String resolved, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/dataset/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testIssueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testIssueId", testIssueId));
        }

        if (testIssueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("testIssueKey", testIssueKey));
        }

        if (contextIssueId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextIssueId", contextIssueId));
        }

        if (contextIssueKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contextIssueKey", contextIssueKey));
        }

        if (resolved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolved", resolved));
        }

        final String[] localVarAccepts = {
            "text/csv", "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call datasetExportGetValidateBeforeCall(String testIssueId, String testIssueKey, String contextIssueId, String contextIssueKey, String resolved, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = datasetExportGetCall(testIssueId, testIssueKey, contextIssueId, contextIssueKey, resolved, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieves a CSV file with the dataset information. &lt;br/&gt; The response will contain all information related to the dataset, e.g., parameters and values. &lt;br/&gt;
     * @param testIssueId The id of the test issue (optional)
     * @param testIssueKey The key of the test issue (optional)
     * @param contextIssueId The id of the context issue (Test Plan or Test Execution) (optional)
     * @param contextIssueKey The key of the context issue (Test Plan or Test Execution) (optional)
     * @param resolved A flag indicating of the dataset must be resolved or not for a given level (true by default) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a CSV file with the dataset information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public String datasetExportGet(String testIssueId, String testIssueKey, String contextIssueId, String contextIssueKey, String resolved) throws ApiException {
        ApiResponse<String> localVarResp = datasetExportGetWithHttpInfo(testIssueId, testIssueKey, contextIssueId, contextIssueKey, resolved);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves a CSV file with the dataset information. &lt;br/&gt; The response will contain all information related to the dataset, e.g., parameters and values. &lt;br/&gt;
     * @param testIssueId The id of the test issue (optional)
     * @param testIssueKey The key of the test issue (optional)
     * @param contextIssueId The id of the context issue (Test Plan or Test Execution) (optional)
     * @param contextIssueKey The key of the context issue (Test Plan or Test Execution) (optional)
     * @param resolved A flag indicating of the dataset must be resolved or not for a given level (true by default) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a CSV file with the dataset information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> datasetExportGetWithHttpInfo(String testIssueId, String testIssueKey, String contextIssueId, String contextIssueKey, String resolved) throws ApiException {
        okhttp3.Call localVarCall = datasetExportGetValidateBeforeCall(testIssueId, testIssueKey, contextIssueId, contextIssueKey, resolved, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves a CSV file with the dataset information. &lt;br/&gt; The response will contain all information related to the dataset, e.g., parameters and values. &lt;br/&gt;
     * @param testIssueId The id of the test issue (optional)
     * @param testIssueKey The key of the test issue (optional)
     * @param contextIssueId The id of the context issue (Test Plan or Test Execution) (optional)
     * @param contextIssueKey The key of the context issue (Test Plan or Test Execution) (optional)
     * @param resolved A flag indicating of the dataset must be resolved or not for a given level (true by default) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation. Returns a CSV file with the dataset information. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call datasetExportGetAsync(String testIssueId, String testIssueKey, String contextIssueId, String contextIssueKey, String resolved, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = datasetExportGetValidateBeforeCall(testIssueId, testIssueKey, contextIssueId, contextIssueKey, resolved, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
