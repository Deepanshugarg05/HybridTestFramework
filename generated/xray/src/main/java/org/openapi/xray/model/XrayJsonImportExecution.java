/*
 * Xray REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.xray.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapi.xray.model.XrayJsonImportExecutionInfo;
import org.openapi.xray.model.XrayJsonImportExecutionTests;

/**
 * XrayJsonImportExecution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-27T23:50:23.072934600+11:00[Australia/Sydney]")
public class XrayJsonImportExecution {
  public static final String SERIALIZED_NAME_TEST_EXECUTION_KEY = "testExecutionKey";
  @SerializedName(SERIALIZED_NAME_TEST_EXECUTION_KEY)
  private String testExecutionKey;

  public static final String SERIALIZED_NAME_INFO = "info";
  @SerializedName(SERIALIZED_NAME_INFO)
  private XrayJsonImportExecutionInfo info;

  public static final String SERIALIZED_NAME_TESTS = "tests";
  @SerializedName(SERIALIZED_NAME_TESTS)
  private List<XrayJsonImportExecutionTests> tests = null;

  public XrayJsonImportExecution() { 
  }

  public XrayJsonImportExecution testExecutionKey(String testExecutionKey) {
    
    this.testExecutionKey = testExecutionKey;
    return this;
  }

   /**
   * Get testExecutionKey
   * @return testExecutionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTestExecutionKey() {
    return testExecutionKey;
  }


  public void setTestExecutionKey(String testExecutionKey) {
    this.testExecutionKey = testExecutionKey;
  }


  public XrayJsonImportExecution info(XrayJsonImportExecutionInfo info) {
    
    this.info = info;
    return this;
  }

   /**
   * Get info
   * @return info
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public XrayJsonImportExecutionInfo getInfo() {
    return info;
  }


  public void setInfo(XrayJsonImportExecutionInfo info) {
    this.info = info;
  }


  public XrayJsonImportExecution tests(List<XrayJsonImportExecutionTests> tests) {
    
    this.tests = tests;
    return this;
  }

  public XrayJsonImportExecution addTestsItem(XrayJsonImportExecutionTests testsItem) {
    if (this.tests == null) {
      this.tests = new ArrayList<>();
    }
    this.tests.add(testsItem);
    return this;
  }

   /**
   * Get tests
   * @return tests
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<XrayJsonImportExecutionTests> getTests() {
    return tests;
  }


  public void setTests(List<XrayJsonImportExecutionTests> tests) {
    this.tests = tests;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    XrayJsonImportExecution xrayJsonImportExecution = (XrayJsonImportExecution) o;
    return Objects.equals(this.testExecutionKey, xrayJsonImportExecution.testExecutionKey) &&
        Objects.equals(this.info, xrayJsonImportExecution.info) &&
        Objects.equals(this.tests, xrayJsonImportExecution.tests);
  }

  @Override
  public int hashCode() {
    return Objects.hash(testExecutionKey, info, tests);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class XrayJsonImportExecution {\n");
    sb.append("    testExecutionKey: ").append(toIndentedString(testExecutionKey)).append("\n");
    sb.append("    info: ").append(toIndentedString(info)).append("\n");
    sb.append("    tests: ").append(toIndentedString(tests)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

