/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option “Zephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.api;

import org.openapi.zephyr.invoker.ApiCallback;
import org.openapi.zephyr.invoker.ApiClient;
import org.openapi.zephyr.invoker.ApiException;
import org.openapi.zephyr.invoker.ApiResponse;
import org.openapi.zephyr.invoker.Configuration;
import org.openapi.zephyr.invoker.Pair;
import org.openapi.zephyr.invoker.ProgressRequestBody;
import org.openapi.zephyr.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.zephyr.model.CreatedResource;
import org.openapi.zephyr.model.Error;
import org.openapi.zephyr.model.IssueLinkInput;
import org.openapi.zephyr.model.KeyedCreatedResource;
import org.openapi.zephyr.model.TestCase;
import org.openapi.zephyr.model.TestCaseInput;
import org.openapi.zephyr.model.TestCaseLinkList;
import org.openapi.zephyr.model.TestCaseList;
import org.openapi.zephyr.model.TestCaseVersionLinkList;
import org.openapi.zephyr.model.TestScript;
import org.openapi.zephyr.model.TestScriptInput;
import org.openapi.zephyr.model.TestStepsInput;
import org.openapi.zephyr.model.TestStepsList;
import org.openapi.zephyr.model.WebLinkInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestCasesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestCasesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestCasesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTestCase
     * @param testCaseInput Test Case Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseCall(TestCaseInput testCaseInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCaseInput;

        // create path and map variables
        String localVarPath = "/testcases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCaseValidateBeforeCall(TestCaseInput testCaseInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseInput' is set
        if (testCaseInput == null) {
            throw new ApiException("Missing the required parameter 'testCaseInput' when calling createTestCase(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCaseCall(testCaseInput, _callback);
        return localVarCall;

    }

    /**
     * Create test case
     * Creates a test case. Fields &#x60;priorityName&#x60; and &#x60;statusName&#x60; will be set to default values if not informed. Default values are usually “Normal” for &#x60;priorityName&#x60; and “Draft” for &#x60;statusName&#x60;. All required test case custom fields should be present in the request. 
     * @param testCaseInput Test Case Input (required)
     * @return KeyedCreatedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public KeyedCreatedResource createTestCase(TestCaseInput testCaseInput) throws ApiException {
        ApiResponse<KeyedCreatedResource> localVarResp = createTestCaseWithHttpInfo(testCaseInput);
        return localVarResp.getData();
    }

    /**
     * Create test case
     * Creates a test case. Fields &#x60;priorityName&#x60; and &#x60;statusName&#x60; will be set to default values if not informed. Default values are usually “Normal” for &#x60;priorityName&#x60; and “Draft” for &#x60;statusName&#x60;. All required test case custom fields should be present in the request. 
     * @param testCaseInput Test Case Input (required)
     * @return ApiResponse&lt;KeyedCreatedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<KeyedCreatedResource> createTestCaseWithHttpInfo(TestCaseInput testCaseInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCaseValidateBeforeCall(testCaseInput, null);
        Type localVarReturnType = new TypeToken<KeyedCreatedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create test case (asynchronously)
     * Creates a test case. Fields &#x60;priorityName&#x60; and &#x60;statusName&#x60; will be set to default values if not informed. Default values are usually “Normal” for &#x60;priorityName&#x60; and “Draft” for &#x60;statusName&#x60;. All required test case custom fields should be present in the request. 
     * @param testCaseInput Test Case Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseAsync(TestCaseInput testCaseInput, final ApiCallback<KeyedCreatedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCaseValidateBeforeCall(testCaseInput, _callback);
        Type localVarReturnType = new TypeToken<KeyedCreatedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTestCaseIssueLinks
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseIssueLinksCall(String testCaseKey, IssueLinkInput issueLinkInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueLinkInput;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/links/issues"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCaseIssueLinksValidateBeforeCall(String testCaseKey, IssueLinkInput issueLinkInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling createTestCaseIssueLinks(Async)");
        }
        
        // verify the required parameter 'issueLinkInput' is set
        if (issueLinkInput == null) {
            throw new ApiException("Missing the required parameter 'issueLinkInput' when calling createTestCaseIssueLinks(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCaseIssueLinksCall(testCaseKey, issueLinkInput, _callback);
        return localVarCall;

    }

    /**
     * Create issue links
     * Creates a link between a test case and a Jira issue.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @return CreatedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public CreatedResource createTestCaseIssueLinks(String testCaseKey, IssueLinkInput issueLinkInput) throws ApiException {
        ApiResponse<CreatedResource> localVarResp = createTestCaseIssueLinksWithHttpInfo(testCaseKey, issueLinkInput);
        return localVarResp.getData();
    }

    /**
     * Create issue links
     * Creates a link between a test case and a Jira issue.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @return ApiResponse&lt;CreatedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CreatedResource> createTestCaseIssueLinksWithHttpInfo(String testCaseKey, IssueLinkInput issueLinkInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCaseIssueLinksValidateBeforeCall(testCaseKey, issueLinkInput, null);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create issue links (asynchronously)
     * Creates a link between a test case and a Jira issue.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseIssueLinksAsync(String testCaseKey, IssueLinkInput issueLinkInput, final ApiCallback<CreatedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCaseIssueLinksValidateBeforeCall(testCaseKey, issueLinkInput, _callback);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTestCaseTestScript
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testScriptInput Test Script Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseTestScriptCall(String testCaseKey, TestScriptInput testScriptInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testScriptInput;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/testscript"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCaseTestScriptValidateBeforeCall(String testCaseKey, TestScriptInput testScriptInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling createTestCaseTestScript(Async)");
        }
        
        // verify the required parameter 'testScriptInput' is set
        if (testScriptInput == null) {
            throw new ApiException("Missing the required parameter 'testScriptInput' when calling createTestCaseTestScript(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCaseTestScriptCall(testCaseKey, testScriptInput, _callback);
        return localVarCall;

    }

    /**
     * Create test script
     * Creates or updates the test script for a test case. If the test case currently has a sequence of test steps assigned to it, these will be implicitly removed.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testScriptInput Test Script Input (required)
     * @return CreatedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public CreatedResource createTestCaseTestScript(String testCaseKey, TestScriptInput testScriptInput) throws ApiException {
        ApiResponse<CreatedResource> localVarResp = createTestCaseTestScriptWithHttpInfo(testCaseKey, testScriptInput);
        return localVarResp.getData();
    }

    /**
     * Create test script
     * Creates or updates the test script for a test case. If the test case currently has a sequence of test steps assigned to it, these will be implicitly removed.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testScriptInput Test Script Input (required)
     * @return ApiResponse&lt;CreatedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CreatedResource> createTestCaseTestScriptWithHttpInfo(String testCaseKey, TestScriptInput testScriptInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCaseTestScriptValidateBeforeCall(testCaseKey, testScriptInput, null);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create test script (asynchronously)
     * Creates or updates the test script for a test case. If the test case currently has a sequence of test steps assigned to it, these will be implicitly removed.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testScriptInput Test Script Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseTestScriptAsync(String testCaseKey, TestScriptInput testScriptInput, final ApiCallback<CreatedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCaseTestScriptValidateBeforeCall(testCaseKey, testScriptInput, _callback);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTestCaseTestSteps
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testStepsInput Test Step Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseTestStepsCall(String testCaseKey, TestStepsInput testStepsInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testStepsInput;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/teststeps"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCaseTestStepsValidateBeforeCall(String testCaseKey, TestStepsInput testStepsInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling createTestCaseTestSteps(Async)");
        }
        
        // verify the required parameter 'testStepsInput' is set
        if (testStepsInput == null) {
            throw new ApiException("Missing the required parameter 'testStepsInput' when calling createTestCaseTestSteps(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCaseTestStepsCall(testCaseKey, testStepsInput, _callback);
        return localVarCall;

    }

    /**
     * Post test steps
     * Assigns a series of test steps to a test case, appending them to any existing sequence of test steps. A maximum of 100 steps can be posted per request. Consumers should not attempt to parallelize this operation, as the order of the steps is defined by the input order. If this endpoint is called on a test case that already has a plain text or BDD test script, that test script will implicitly be removed. All required step custom fields should be present in the request. 
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testStepsInput Test Step Input (required)
     * @return CreatedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public CreatedResource createTestCaseTestSteps(String testCaseKey, TestStepsInput testStepsInput) throws ApiException {
        ApiResponse<CreatedResource> localVarResp = createTestCaseTestStepsWithHttpInfo(testCaseKey, testStepsInput);
        return localVarResp.getData();
    }

    /**
     * Post test steps
     * Assigns a series of test steps to a test case, appending them to any existing sequence of test steps. A maximum of 100 steps can be posted per request. Consumers should not attempt to parallelize this operation, as the order of the steps is defined by the input order. If this endpoint is called on a test case that already has a plain text or BDD test script, that test script will implicitly be removed. All required step custom fields should be present in the request. 
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testStepsInput Test Step Input (required)
     * @return ApiResponse&lt;CreatedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CreatedResource> createTestCaseTestStepsWithHttpInfo(String testCaseKey, TestStepsInput testStepsInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCaseTestStepsValidateBeforeCall(testCaseKey, testStepsInput, null);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Post test steps (asynchronously)
     * Assigns a series of test steps to a test case, appending them to any existing sequence of test steps. A maximum of 100 steps can be posted per request. Consumers should not attempt to parallelize this operation, as the order of the steps is defined by the input order. If this endpoint is called on a test case that already has a plain text or BDD test script, that test script will implicitly be removed. All required step custom fields should be present in the request. 
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testStepsInput Test Step Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseTestStepsAsync(String testCaseKey, TestStepsInput testStepsInput, final ApiCallback<CreatedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCaseTestStepsValidateBeforeCall(testCaseKey, testStepsInput, _callback);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTestCaseWebLinks
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseWebLinksCall(String testCaseKey, WebLinkInput webLinkInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webLinkInput;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/links/weblinks"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCaseWebLinksValidateBeforeCall(String testCaseKey, WebLinkInput webLinkInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling createTestCaseWebLinks(Async)");
        }
        
        // verify the required parameter 'webLinkInput' is set
        if (webLinkInput == null) {
            throw new ApiException("Missing the required parameter 'webLinkInput' when calling createTestCaseWebLinks(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCaseWebLinksCall(testCaseKey, webLinkInput, _callback);
        return localVarCall;

    }

    /**
     * Create web links
     * Creates a link between a test case and a generic URL.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @return CreatedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public CreatedResource createTestCaseWebLinks(String testCaseKey, WebLinkInput webLinkInput) throws ApiException {
        ApiResponse<CreatedResource> localVarResp = createTestCaseWebLinksWithHttpInfo(testCaseKey, webLinkInput);
        return localVarResp.getData();
    }

    /**
     * Create web links
     * Creates a link between a test case and a generic URL.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @return ApiResponse&lt;CreatedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<CreatedResource> createTestCaseWebLinksWithHttpInfo(String testCaseKey, WebLinkInput webLinkInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCaseWebLinksValidateBeforeCall(testCaseKey, webLinkInput, null);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create web links (asynchronously)
     * Creates a link between a test case and a generic URL.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCaseWebLinksAsync(String testCaseKey, WebLinkInput webLinkInput, final ApiCallback<CreatedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCaseWebLinksValidateBeforeCall(testCaseKey, webLinkInput, _callback);
        Type localVarReturnType = new TypeToken<CreatedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCase
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseCall(String testCaseKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCaseValidateBeforeCall(String testCaseKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling getTestCase(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCaseCall(testCaseKey, _callback);
        return localVarCall;

    }

    /**
     * Get test case
     * Returns a test case for the given key.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @return TestCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCase getTestCase(String testCaseKey) throws ApiException {
        ApiResponse<TestCase> localVarResp = getTestCaseWithHttpInfo(testCaseKey);
        return localVarResp.getData();
    }

    /**
     * Get test case
     * Returns a test case for the given key.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @return ApiResponse&lt;TestCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCase> getTestCaseWithHttpInfo(String testCaseKey) throws ApiException {
        okhttp3.Call localVarCall = getTestCaseValidateBeforeCall(testCaseKey, null);
        Type localVarReturnType = new TypeToken<TestCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get test case (asynchronously)
     * Returns a test case for the given key.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseAsync(String testCaseKey, final ApiCallback<TestCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCaseValidateBeforeCall(testCaseKey, _callback);
        Type localVarReturnType = new TypeToken<TestCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCaseLinks
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseLinksCall(String testCaseKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/links"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCaseLinksValidateBeforeCall(String testCaseKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling getTestCaseLinks(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCaseLinksCall(testCaseKey, _callback);
        return localVarCall;

    }

    /**
     * Get links
     * Returns links for a test case with specified key.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @return TestCaseLinkList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCaseLinkList getTestCaseLinks(String testCaseKey) throws ApiException {
        ApiResponse<TestCaseLinkList> localVarResp = getTestCaseLinksWithHttpInfo(testCaseKey);
        return localVarResp.getData();
    }

    /**
     * Get links
     * Returns links for a test case with specified key.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @return ApiResponse&lt;TestCaseLinkList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCaseLinkList> getTestCaseLinksWithHttpInfo(String testCaseKey) throws ApiException {
        okhttp3.Call localVarCall = getTestCaseLinksValidateBeforeCall(testCaseKey, null);
        Type localVarReturnType = new TypeToken<TestCaseLinkList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get links (asynchronously)
     * Returns links for a test case with specified key.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseLinksAsync(String testCaseKey, final ApiCallback<TestCaseLinkList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCaseLinksValidateBeforeCall(testCaseKey, _callback);
        Type localVarReturnType = new TypeToken<TestCaseLinkList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCaseTestScript
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseTestScriptCall(String testCaseKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/testscript"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCaseTestScriptValidateBeforeCall(String testCaseKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling getTestCaseTestScript(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCaseTestScriptCall(testCaseKey, _callback);
        return localVarCall;

    }

    /**
     * Get test script
     * Returns the test script for the given test case
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @return TestScript
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestScript getTestCaseTestScript(String testCaseKey) throws ApiException {
        ApiResponse<TestScript> localVarResp = getTestCaseTestScriptWithHttpInfo(testCaseKey);
        return localVarResp.getData();
    }

    /**
     * Get test script
     * Returns the test script for the given test case
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @return ApiResponse&lt;TestScript&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestScript> getTestCaseTestScriptWithHttpInfo(String testCaseKey) throws ApiException {
        okhttp3.Call localVarCall = getTestCaseTestScriptValidateBeforeCall(testCaseKey, null);
        Type localVarReturnType = new TypeToken<TestScript>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get test script (asynchronously)
     * Returns the test script for the given test case
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseTestScriptAsync(String testCaseKey, final ApiCallback<TestScript> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCaseTestScriptValidateBeforeCall(testCaseKey, _callback);
        Type localVarReturnType = new TypeToken<TestScript>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCaseTestSteps
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseTestStepsCall(String testCaseKey, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/teststeps"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCaseTestStepsValidateBeforeCall(String testCaseKey, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling getTestCaseTestSteps(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCaseTestStepsCall(testCaseKey, maxResults, startAt, _callback);
        return localVarCall;

    }

    /**
     * Get test steps
     * Returns the test steps for the given test case. Provides a paged response, with 100 items per page.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return TestStepsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestStepsList getTestCaseTestSteps(String testCaseKey, Long maxResults, Long startAt) throws ApiException {
        ApiResponse<TestStepsList> localVarResp = getTestCaseTestStepsWithHttpInfo(testCaseKey, maxResults, startAt);
        return localVarResp.getData();
    }

    /**
     * Get test steps
     * Returns the test steps for the given test case. Provides a paged response, with 100 items per page.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return ApiResponse&lt;TestStepsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestStepsList> getTestCaseTestStepsWithHttpInfo(String testCaseKey, Long maxResults, Long startAt) throws ApiException {
        okhttp3.Call localVarCall = getTestCaseTestStepsValidateBeforeCall(testCaseKey, maxResults, startAt, null);
        Type localVarReturnType = new TypeToken<TestStepsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get test steps (asynchronously)
     * Returns the test steps for the given test case. Provides a paged response, with 100 items per page.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseTestStepsAsync(String testCaseKey, Long maxResults, Long startAt, final ApiCallback<TestStepsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCaseTestStepsValidateBeforeCall(testCaseKey, maxResults, startAt, _callback);
        Type localVarReturnType = new TypeToken<TestStepsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCaseVersion
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param version Version of the test case to retrieve. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseVersionCall(String testCaseKey, Long version, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/versions/{version}"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()))
            .replaceAll("\\{" + "version" + "\\}", localVarApiClient.escapeString(version.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCaseVersionValidateBeforeCall(String testCaseKey, Long version, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling getTestCaseVersion(Async)");
        }
        
        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getTestCaseVersion(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCaseVersionCall(testCaseKey, version, _callback);
        return localVarCall;

    }

    /**
     * Get version
     * Retrieves a specific version of a test case.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param version Version of the test case to retrieve. (required)
     * @return TestCase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCase getTestCaseVersion(String testCaseKey, Long version) throws ApiException {
        ApiResponse<TestCase> localVarResp = getTestCaseVersionWithHttpInfo(testCaseKey, version);
        return localVarResp.getData();
    }

    /**
     * Get version
     * Retrieves a specific version of a test case.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param version Version of the test case to retrieve. (required)
     * @return ApiResponse&lt;TestCase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCase> getTestCaseVersionWithHttpInfo(String testCaseKey, Long version) throws ApiException {
        okhttp3.Call localVarCall = getTestCaseVersionValidateBeforeCall(testCaseKey, version, null);
        Type localVarReturnType = new TypeToken<TestCase>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get version (asynchronously)
     * Retrieves a specific version of a test case.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param version Version of the test case to retrieve. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCaseVersionAsync(String testCaseKey, Long version, final ApiCallback<TestCase> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCaseVersionValidateBeforeCall(testCaseKey, version, _callback);
        Type localVarReturnType = new TypeToken<TestCase>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTestCaseVersions
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listTestCaseVersionsCall(String testCaseKey, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}/versions"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTestCaseVersionsValidateBeforeCall(String testCaseKey, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling listTestCaseVersions(Async)");
        }
        

        okhttp3.Call localVarCall = listTestCaseVersionsCall(testCaseKey, maxResults, startAt, _callback);
        return localVarCall;

    }

    /**
     * Get versions
     * Returns all test case versions for a test case with specified key. Response is ordered by most recent first.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return TestCaseVersionLinkList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCaseVersionLinkList listTestCaseVersions(String testCaseKey, Long maxResults, Long startAt) throws ApiException {
        ApiResponse<TestCaseVersionLinkList> localVarResp = listTestCaseVersionsWithHttpInfo(testCaseKey, maxResults, startAt);
        return localVarResp.getData();
    }

    /**
     * Get versions
     * Returns all test case versions for a test case with specified key. Response is ordered by most recent first.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return ApiResponse&lt;TestCaseVersionLinkList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCaseVersionLinkList> listTestCaseVersionsWithHttpInfo(String testCaseKey, Long maxResults, Long startAt) throws ApiException {
        okhttp3.Call localVarCall = listTestCaseVersionsValidateBeforeCall(testCaseKey, maxResults, startAt, null);
        Type localVarReturnType = new TypeToken<TestCaseVersionLinkList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get versions (asynchronously)
     * Returns all test case versions for a test case with specified key. Response is ordered by most recent first.
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listTestCaseVersionsAsync(String testCaseKey, Long maxResults, Long startAt, final ApiCallback<TestCaseVersionLinkList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTestCaseVersionsValidateBeforeCall(testCaseKey, maxResults, startAt, _callback);
        Type localVarReturnType = new TypeToken<TestCaseVersionLinkList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTestCases
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listTestCasesCall(String projectKey, Long folderId, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKey", projectKey));
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folderId", folderId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTestCasesValidateBeforeCall(String projectKey, Long folderId, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTestCasesCall(projectKey, folderId, maxResults, startAt, _callback);
        return localVarCall;

    }

    /**
     * Get test cases
     * Retrieves all test cases. Query parameters can be used to filter the results.
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return TestCaseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCaseList listTestCases(String projectKey, Long folderId, Long maxResults, Long startAt) throws ApiException {
        ApiResponse<TestCaseList> localVarResp = listTestCasesWithHttpInfo(projectKey, folderId, maxResults, startAt);
        return localVarResp.getData();
    }

    /**
     * Get test cases
     * Retrieves all test cases. Query parameters can be used to filter the results.
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return ApiResponse&lt;TestCaseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCaseList> listTestCasesWithHttpInfo(String projectKey, Long folderId, Long maxResults, Long startAt) throws ApiException {
        okhttp3.Call localVarCall = listTestCasesValidateBeforeCall(projectKey, folderId, maxResults, startAt, null);
        Type localVarReturnType = new TypeToken<TestCaseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get test cases (asynchronously)
     * Retrieves all test cases. Query parameters can be used to filter the results.
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listTestCasesAsync(String projectKey, Long folderId, Long maxResults, Long startAt, final ApiCallback<TestCaseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTestCasesValidateBeforeCall(projectKey, folderId, maxResults, startAt, _callback);
        Type localVarReturnType = new TypeToken<TestCaseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTestCase
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testCase Test Case Update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateTestCaseCall(String testCaseKey, TestCase testCase, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCase;

        // create path and map variables
        String localVarPath = "/testcases/{testCaseKey}"
            .replaceAll("\\{" + "testCaseKey" + "\\}", localVarApiClient.escapeString(testCaseKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTestCaseValidateBeforeCall(String testCaseKey, TestCase testCase, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCaseKey' is set
        if (testCaseKey == null) {
            throw new ApiException("Missing the required parameter 'testCaseKey' when calling updateTestCase(Async)");
        }
        
        // verify the required parameter 'testCase' is set
        if (testCase == null) {
            throw new ApiException("Missing the required parameter 'testCase' when calling updateTestCase(Async)");
        }
        

        okhttp3.Call localVarCall = updateTestCaseCall(testCaseKey, testCase, _callback);
        return localVarCall;

    }

    /**
     * Update test case
     * Updates an existing test case. If the project has test case custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testCase Test Case Update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public void updateTestCase(String testCaseKey, TestCase testCase) throws ApiException {
        updateTestCaseWithHttpInfo(testCaseKey, testCase);
    }

    /**
     * Update test case
     * Updates an existing test case. If the project has test case custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testCase Test Case Update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTestCaseWithHttpInfo(String testCaseKey, TestCase testCase) throws ApiException {
        okhttp3.Call localVarCall = updateTestCaseValidateBeforeCall(testCaseKey, testCase, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update test case (asynchronously)
     * Updates an existing test case. If the project has test case custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     * @param testCaseKey The key of the test case. Test case keys are of the format [A-Z]+-T[0-9]+ (required)
     * @param testCase Test Case Update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateTestCaseAsync(String testCaseKey, TestCase testCase, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTestCaseValidateBeforeCall(testCaseKey, testCase, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
