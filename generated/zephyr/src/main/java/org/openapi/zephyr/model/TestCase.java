/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option â€œZephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapi.zephyr.model.FolderLink;
import org.openapi.zephyr.model.JiraComponent;
import org.openapi.zephyr.model.JiraUserLink;
import org.openapi.zephyr.model.PriorityLink;
import org.openapi.zephyr.model.ProjectLink;
import org.openapi.zephyr.model.StatusLink;
import org.openapi.zephyr.model.TestCaseLinkList;
import org.openapi.zephyr.model.TestCaseTestScriptLink;

/**
 * TestCase
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-28T00:21:27.203715400+11:00[Australia/Sydney]")
public class TestCase {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectLink project;

  public static final String SERIALIZED_NAME_CREATED_ON = "createdOn";
  @SerializedName(SERIALIZED_NAME_CREATED_ON)
  private OffsetDateTime createdOn;

  public static final String SERIALIZED_NAME_OBJECTIVE = "objective";
  @SerializedName(SERIALIZED_NAME_OBJECTIVE)
  private String objective;

  public static final String SERIALIZED_NAME_PRECONDITION = "precondition";
  @SerializedName(SERIALIZED_NAME_PRECONDITION)
  private String precondition;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME = "estimatedTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME)
  private Long estimatedTime;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = null;

  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  private JiraComponent component;

  public static final String SERIALIZED_NAME_PRIORITY = "priority";
  @SerializedName(SERIALIZED_NAME_PRIORITY)
  private PriorityLink priority;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusLink status;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private FolderLink folder;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private JiraUserLink owner;

  public static final String SERIALIZED_NAME_TEST_SCRIPT = "testScript";
  @SerializedName(SERIALIZED_NAME_TEST_SCRIPT)
  private TestCaseTestScriptLink testScript;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private TestCaseLinkList links;

  public TestCase() { 
  }

  public TestCase id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * minimum: 1
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public TestCase key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * The teste case key
   * @return key
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "SA-T10", required = true, value = "The teste case key")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public TestCase name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "Check axial pump", required = true, value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public TestCase project(ProjectLink project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectLink getProject() {
    return project;
  }


  public void setProject(ProjectLink project) {
    this.project = project;
  }


  public TestCase createdOn(OffsetDateTime createdOn) {
    
    this.createdOn = createdOn;
    return this;
  }

   /**
   * Data and time test case was created. Format: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
   * @return createdOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-05-15T13:15:13Z", value = "Data and time test case was created. Format: yyyy-MM-dd'T'HH:mm:ss'Z'")

  public OffsetDateTime getCreatedOn() {
    return createdOn;
  }


  public void setCreatedOn(OffsetDateTime createdOn) {
    this.createdOn = createdOn;
  }


  public TestCase objective(String objective) {
    
    this.objective = objective;
    return this;
  }

   /**
   * A description of the objective.
   * @return objective
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "To ensure the axial pump can be enabled", value = "A description of the objective.")

  public String getObjective() {
    return objective;
  }


  public void setObjective(String objective) {
    this.objective = objective;
  }


  public TestCase precondition(String precondition) {
    
    this.precondition = precondition;
    return this;
  }

   /**
   * Any conditions that need to be met.
   * @return precondition
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Latest version of the axial pump available", value = "Any conditions that need to be met.")

  public String getPrecondition() {
    return precondition;
  }


  public void setPrecondition(String precondition) {
    this.precondition = precondition;
  }


  public TestCase estimatedTime(Long estimatedTime) {
    
    this.estimatedTime = estimatedTime;
    return this;
  }

   /**
   * Estimated duration in milliseconds.
   * minimum: 0
   * @return estimatedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "138000", value = "Estimated duration in milliseconds.")

  public Long getEstimatedTime() {
    return estimatedTime;
  }


  public void setEstimatedTime(Long estimatedTime) {
    this.estimatedTime = estimatedTime;
  }


  public TestCase labels(List<String> labels) {
    
    this.labels = labels;
    return this;
  }

  public TestCase addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

   /**
   * Array of labels associated to this entity.
   * @return labels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"Regression\",\"Performance\",\"Automated\"]", value = "Array of labels associated to this entity.")

  public List<String> getLabels() {
    return labels;
  }


  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public TestCase component(JiraComponent component) {
    
    this.component = component;
    return this;
  }

   /**
   * Get component
   * @return component
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JiraComponent getComponent() {
    return component;
  }


  public void setComponent(JiraComponent component) {
    this.component = component;
  }


  public TestCase priority(PriorityLink priority) {
    
    this.priority = priority;
    return this;
  }

   /**
   * Get priority
   * @return priority
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public PriorityLink getPriority() {
    return priority;
  }


  public void setPriority(PriorityLink priority) {
    this.priority = priority;
  }


  public TestCase status(StatusLink status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusLink getStatus() {
    return status;
  }


  public void setStatus(StatusLink status) {
    this.status = status;
  }


  public TestCase folder(FolderLink folder) {
    
    this.folder = folder;
    return this;
  }

   /**
   * Get folder
   * @return folder
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public FolderLink getFolder() {
    return folder;
  }


  public void setFolder(FolderLink folder) {
    this.folder = folder;
  }


  public TestCase owner(JiraUserLink owner) {
    
    this.owner = owner;
    return this;
  }

   /**
   * Get owner
   * @return owner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public JiraUserLink getOwner() {
    return owner;
  }


  public void setOwner(JiraUserLink owner) {
    this.owner = owner;
  }


  public TestCase testScript(TestCaseTestScriptLink testScript) {
    
    this.testScript = testScript;
    return this;
  }

   /**
   * Get testScript
   * @return testScript
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestCaseTestScriptLink getTestScript() {
    return testScript;
  }


  public void setTestScript(TestCaseTestScriptLink testScript) {
    this.testScript = testScript;
  }


  public TestCase customFields(Map<String, Object> customFields) {
    
    this.customFields = customFields;
    return this;
  }

  public TestCase putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * Multi-line text fields should denote a new line with the \\&lt;br\\&gt; syntax. Dates should be in the format &#39;yyyy-MM-dd&#39;. Users should provided by the user ID. 
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"Build Number\":20,\"Release Date\":\"2020-01-01\",\"Pre-Condition(s)\":\"User should have logged in. <br> User should have navigated to the administration panel.\",\"Implemented\":false,\"Category\":[\"Performance\",\"Regression\"],\"Tester\":\"fa2e582e-5e15-521e-92e3-47e6ca2e7256\"}", value = "Multi-line text fields should denote a new line with the \\<br\\> syntax. Dates should be in the format 'yyyy-MM-dd'. Users should provided by the user ID. ")

  public Map<String, Object> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public TestCase links(TestCaseLinkList links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestCaseLinkList getLinks() {
    return links;
  }


  public void setLinks(TestCaseLinkList links) {
    this.links = links;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestCase testCase = (TestCase) o;
    return Objects.equals(this.id, testCase.id) &&
        Objects.equals(this.key, testCase.key) &&
        Objects.equals(this.name, testCase.name) &&
        Objects.equals(this.project, testCase.project) &&
        Objects.equals(this.createdOn, testCase.createdOn) &&
        Objects.equals(this.objective, testCase.objective) &&
        Objects.equals(this.precondition, testCase.precondition) &&
        Objects.equals(this.estimatedTime, testCase.estimatedTime) &&
        Objects.equals(this.labels, testCase.labels) &&
        Objects.equals(this.component, testCase.component) &&
        Objects.equals(this.priority, testCase.priority) &&
        Objects.equals(this.status, testCase.status) &&
        Objects.equals(this.folder, testCase.folder) &&
        Objects.equals(this.owner, testCase.owner) &&
        Objects.equals(this.testScript, testCase.testScript) &&
        Objects.equals(this.customFields, testCase.customFields) &&
        Objects.equals(this.links, testCase.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, key, name, project, createdOn, objective, precondition, estimatedTime, labels, component, priority, status, folder, owner, testScript, customFields, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestCase {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    createdOn: ").append(toIndentedString(createdOn)).append("\n");
    sb.append("    objective: ").append(toIndentedString(objective)).append("\n");
    sb.append("    precondition: ").append(toIndentedString(precondition)).append("\n");
    sb.append("    estimatedTime: ").append(toIndentedString(estimatedTime)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    priority: ").append(toIndentedString(priority)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    testScript: ").append(toIndentedString(testScript)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

