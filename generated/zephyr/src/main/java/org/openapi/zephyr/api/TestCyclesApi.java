/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option â€œZephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.api;

import org.openapi.zephyr.invoker.ApiCallback;
import org.openapi.zephyr.invoker.ApiClient;
import org.openapi.zephyr.invoker.ApiException;
import org.openapi.zephyr.invoker.ApiResponse;
import org.openapi.zephyr.invoker.Configuration;
import org.openapi.zephyr.invoker.Pair;
import org.openapi.zephyr.invoker.ProgressRequestBody;
import org.openapi.zephyr.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapi.zephyr.model.Error;
import org.openapi.zephyr.model.IssueLinkInput;
import org.openapi.zephyr.model.KeyedCreatedResource;
import org.openapi.zephyr.model.TestCycle;
import org.openapi.zephyr.model.TestCycleInput;
import org.openapi.zephyr.model.TestCycleLinkList;
import org.openapi.zephyr.model.TestCycleList;
import org.openapi.zephyr.model.WebLinkInput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TestCyclesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TestCyclesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TestCyclesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTestCycle
     * @param testCycleInput Test Cycle Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCycleCall(TestCycleInput testCycleInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCycleInput;

        // create path and map variables
        String localVarPath = "/testcycles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCycleValidateBeforeCall(TestCycleInput testCycleInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCycleInput' is set
        if (testCycleInput == null) {
            throw new ApiException("Missing the required parameter 'testCycleInput' when calling createTestCycle(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCycleCall(testCycleInput, _callback);
        return localVarCall;

    }

    /**
     * Create a Test Cycle
     * Creates a Test Cycle. All required test cycle custom fields should be present in the request.
     * @param testCycleInput Test Cycle Input (required)
     * @return KeyedCreatedResource
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public KeyedCreatedResource createTestCycle(TestCycleInput testCycleInput) throws ApiException {
        ApiResponse<KeyedCreatedResource> localVarResp = createTestCycleWithHttpInfo(testCycleInput);
        return localVarResp.getData();
    }

    /**
     * Create a Test Cycle
     * Creates a Test Cycle. All required test cycle custom fields should be present in the request.
     * @param testCycleInput Test Cycle Input (required)
     * @return ApiResponse&lt;KeyedCreatedResource&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<KeyedCreatedResource> createTestCycleWithHttpInfo(TestCycleInput testCycleInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCycleValidateBeforeCall(testCycleInput, null);
        Type localVarReturnType = new TypeToken<KeyedCreatedResource>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Test Cycle (asynchronously)
     * Creates a Test Cycle. All required test cycle custom fields should be present in the request.
     * @param testCycleInput Test Cycle Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCycleAsync(TestCycleInput testCycleInput, final ApiCallback<KeyedCreatedResource> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCycleValidateBeforeCall(testCycleInput, _callback);
        Type localVarReturnType = new TypeToken<KeyedCreatedResource>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTestCycleIssueLink
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCycleIssueLinkCall(String testCycleIdOrKey, IssueLinkInput issueLinkInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = issueLinkInput;

        // create path and map variables
        String localVarPath = "/testcycles/{testCycleIdOrKey}/links/issues"
            .replaceAll("\\{" + "testCycleIdOrKey" + "\\}", localVarApiClient.escapeString(testCycleIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCycleIssueLinkValidateBeforeCall(String testCycleIdOrKey, IssueLinkInput issueLinkInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCycleIdOrKey' is set
        if (testCycleIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'testCycleIdOrKey' when calling createTestCycleIssueLink(Async)");
        }
        
        // verify the required parameter 'issueLinkInput' is set
        if (issueLinkInput == null) {
            throw new ApiException("Missing the required parameter 'issueLinkInput' when calling createTestCycleIssueLink(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCycleIssueLinkCall(testCycleIdOrKey, issueLinkInput, _callback);
        return localVarCall;

    }

    /**
     * Create issue links
     * Creates a link between a test cycle and a Jira issue.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public void createTestCycleIssueLink(String testCycleIdOrKey, IssueLinkInput issueLinkInput) throws ApiException {
        createTestCycleIssueLinkWithHttpInfo(testCycleIdOrKey, issueLinkInput);
    }

    /**
     * Create issue links
     * Creates a link between a test cycle and a Jira issue.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> createTestCycleIssueLinkWithHttpInfo(String testCycleIdOrKey, IssueLinkInput issueLinkInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCycleIssueLinkValidateBeforeCall(testCycleIdOrKey, issueLinkInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create issue links (asynchronously)
     * Creates a link between a test cycle and a Jira issue.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param issueLinkInput Issue Link Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCycleIssueLinkAsync(String testCycleIdOrKey, IssueLinkInput issueLinkInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCycleIssueLinkValidateBeforeCall(testCycleIdOrKey, issueLinkInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTestCycleWebLink
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCycleWebLinkCall(String testCycleIdOrKey, WebLinkInput webLinkInput, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webLinkInput;

        // create path and map variables
        String localVarPath = "/testcycles/{testCycleIdOrKey}/links/weblinks"
            .replaceAll("\\{" + "testCycleIdOrKey" + "\\}", localVarApiClient.escapeString(testCycleIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTestCycleWebLinkValidateBeforeCall(String testCycleIdOrKey, WebLinkInput webLinkInput, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCycleIdOrKey' is set
        if (testCycleIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'testCycleIdOrKey' when calling createTestCycleWebLink(Async)");
        }
        
        // verify the required parameter 'webLinkInput' is set
        if (webLinkInput == null) {
            throw new ApiException("Missing the required parameter 'webLinkInput' when calling createTestCycleWebLink(Async)");
        }
        

        okhttp3.Call localVarCall = createTestCycleWebLinkCall(testCycleIdOrKey, webLinkInput, _callback);
        return localVarCall;

    }

    /**
     * Create web links
     * Creates a link between a test cycle and a generic URL.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public void createTestCycleWebLink(String testCycleIdOrKey, WebLinkInput webLinkInput) throws ApiException {
        createTestCycleWebLinkWithHttpInfo(testCycleIdOrKey, webLinkInput);
    }

    /**
     * Create web links
     * Creates a link between a test cycle and a generic URL.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> createTestCycleWebLinkWithHttpInfo(String testCycleIdOrKey, WebLinkInput webLinkInput) throws ApiException {
        okhttp3.Call localVarCall = createTestCycleWebLinkValidateBeforeCall(testCycleIdOrKey, webLinkInput, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create web links (asynchronously)
     * Creates a link between a test cycle and a generic URL.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param webLinkInput Web Link Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call createTestCycleWebLinkAsync(String testCycleIdOrKey, WebLinkInput webLinkInput, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTestCycleWebLinkValidateBeforeCall(testCycleIdOrKey, webLinkInput, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCycle
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCycleCall(String testCycleIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcycles/{testCycleIdOrKey}"
            .replaceAll("\\{" + "testCycleIdOrKey" + "\\}", localVarApiClient.escapeString(testCycleIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCycleValidateBeforeCall(String testCycleIdOrKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCycleIdOrKey' is set
        if (testCycleIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'testCycleIdOrKey' when calling getTestCycle(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCycleCall(testCycleIdOrKey, _callback);
        return localVarCall;

    }

    /**
     * Get test cycle
     * Returns a test cycle for the given key.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @return TestCycle
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCycle getTestCycle(String testCycleIdOrKey) throws ApiException {
        ApiResponse<TestCycle> localVarResp = getTestCycleWithHttpInfo(testCycleIdOrKey);
        return localVarResp.getData();
    }

    /**
     * Get test cycle
     * Returns a test cycle for the given key.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @return ApiResponse&lt;TestCycle&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCycle> getTestCycleWithHttpInfo(String testCycleIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getTestCycleValidateBeforeCall(testCycleIdOrKey, null);
        Type localVarReturnType = new TypeToken<TestCycle>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get test cycle (asynchronously)
     * Returns a test cycle for the given key.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCycleAsync(String testCycleIdOrKey, final ApiCallback<TestCycle> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCycleValidateBeforeCall(testCycleIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<TestCycle>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTestCycleLinks
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCycleLinksCall(String testCycleIdOrKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcycles/{testCycleIdOrKey}/links"
            .replaceAll("\\{" + "testCycleIdOrKey" + "\\}", localVarApiClient.escapeString(testCycleIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestCycleLinksValidateBeforeCall(String testCycleIdOrKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCycleIdOrKey' is set
        if (testCycleIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'testCycleIdOrKey' when calling getTestCycleLinks(Async)");
        }
        

        okhttp3.Call localVarCall = getTestCycleLinksCall(testCycleIdOrKey, _callback);
        return localVarCall;

    }

    /**
     * Get links
     * Returns links for a test cycle with specified key.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @return TestCycleLinkList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCycleLinkList getTestCycleLinks(String testCycleIdOrKey) throws ApiException {
        ApiResponse<TestCycleLinkList> localVarResp = getTestCycleLinksWithHttpInfo(testCycleIdOrKey);
        return localVarResp.getData();
    }

    /**
     * Get links
     * Returns links for a test cycle with specified key.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @return ApiResponse&lt;TestCycleLinkList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCycleLinkList> getTestCycleLinksWithHttpInfo(String testCycleIdOrKey) throws ApiException {
        okhttp3.Call localVarCall = getTestCycleLinksValidateBeforeCall(testCycleIdOrKey, null);
        Type localVarReturnType = new TypeToken<TestCycleLinkList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get links (asynchronously)
     * Returns links for a test cycle with specified key.
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getTestCycleLinksAsync(String testCycleIdOrKey, final ApiCallback<TestCycleLinkList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestCycleLinksValidateBeforeCall(testCycleIdOrKey, _callback);
        Type localVarReturnType = new TypeToken<TestCycleLinkList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTestCycles
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listTestCyclesCall(String projectKey, Long folderId, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/testcycles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectKey", projectKey));
        }

        if (folderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folderId", folderId));
        }

        if (maxResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxResults", maxResults));
        }

        if (startAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startAt", startAt));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTestCyclesValidateBeforeCall(String projectKey, Long folderId, Long maxResults, Long startAt, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTestCyclesCall(projectKey, folderId, maxResults, startAt, _callback);
        return localVarCall;

    }

    /**
     * Get all Test Cycles
     * Returns all test cycles. Query parameters can be used to filter by project and folder.
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return TestCycleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public TestCycleList listTestCycles(String projectKey, Long folderId, Long maxResults, Long startAt) throws ApiException {
        ApiResponse<TestCycleList> localVarResp = listTestCyclesWithHttpInfo(projectKey, folderId, maxResults, startAt);
        return localVarResp.getData();
    }

    /**
     * Get all Test Cycles
     * Returns all test cycles. Query parameters can be used to filter by project and folder.
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @return ApiResponse&lt;TestCycleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<TestCycleList> listTestCyclesWithHttpInfo(String projectKey, Long folderId, Long maxResults, Long startAt) throws ApiException {
        okhttp3.Call localVarCall = listTestCyclesValidateBeforeCall(projectKey, folderId, maxResults, startAt, null);
        Type localVarReturnType = new TypeToken<TestCycleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Test Cycles (asynchronously)
     * Returns all test cycles. Query parameters can be used to filter by project and folder.
     * @param projectKey Jira project key filter (optional)
     * @param folderId Folder ID filter (optional)
     * @param maxResults A hint as to the maximum number of results to return in each call. Note that the server reserves the right to impose a maxResults limit that is lower than the value that a client provides, due to lack or resources or any other condition. When this happens, your results will be truncated. Callers should always check the returned maxResults to determine the value that is effectively being used. (optional, default to 10)
     * @param startAt Zero-indexed starting position. Should be a multiple of maxResults. (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call listTestCyclesAsync(String projectKey, Long folderId, Long maxResults, Long startAt, final ApiCallback<TestCycleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTestCyclesValidateBeforeCall(projectKey, folderId, maxResults, startAt, _callback);
        Type localVarReturnType = new TypeToken<TestCycleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTestCycle
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param testCycle Test Cycle Update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateTestCycleCall(String testCycleIdOrKey, TestCycle testCycle, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testCycle;

        // create path and map variables
        String localVarPath = "/testcycles/{testCycleIdOrKey}"
            .replaceAll("\\{" + "testCycleIdOrKey" + "\\}", localVarApiClient.escapeString(testCycleIdOrKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "AccessToken" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTestCycleValidateBeforeCall(String testCycleIdOrKey, TestCycle testCycle, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'testCycleIdOrKey' is set
        if (testCycleIdOrKey == null) {
            throw new ApiException("Missing the required parameter 'testCycleIdOrKey' when calling updateTestCycle(Async)");
        }
        
        // verify the required parameter 'testCycle' is set
        if (testCycle == null) {
            throw new ApiException("Missing the required parameter 'testCycle' when calling updateTestCycle(Async)");
        }
        

        okhttp3.Call localVarCall = updateTestCycleCall(testCycleIdOrKey, testCycle, _callback);
        return localVarCall;

    }

    /**
     * Update test cycle
     * Updates an existing test cycle. If the project has test cycle custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param testCycle Test Cycle Update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public void updateTestCycle(String testCycleIdOrKey, TestCycle testCycle) throws ApiException {
        updateTestCycleWithHttpInfo(testCycleIdOrKey, testCycle);
    }

    /**
     * Update test cycle
     * Updates an existing test cycle. If the project has test cycle custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param testCycle Test Cycle Update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateTestCycleWithHttpInfo(String testCycleIdOrKey, TestCycle testCycle) throws ApiException {
        okhttp3.Call localVarCall = updateTestCycleValidateBeforeCall(testCycleIdOrKey, testCycle, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update test cycle (asynchronously)
     * Updates an existing test cycle. If the project has test cycle custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     * @param testCycleIdOrKey The ID or key of the test cycle. Test cycle keys are of the format [A-Z]+-R[0-9]+ (required)
     * @param testCycle Test Cycle Update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  * location - URL of the created link <br>  </td></tr>
        <tr><td> 0 </td><td> An error has occurred. Please check the code and the error message. </td><td>  * Access-Control-Allow-Headers -  <br>  * Access-Control-Allow-Methods -  <br>  * Access-Control-Allow-Origin -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call updateTestCycleAsync(String testCycleIdOrKey, TestCycle testCycle, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTestCycleValidateBeforeCall(testCycleIdOrKey, testCycle, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
