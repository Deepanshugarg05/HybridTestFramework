/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option â€œZephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapi.zephyr.model.EnvironmentLink;
import org.openapi.zephyr.model.ProjectLink;
import org.openapi.zephyr.model.StatusLink;
import org.openapi.zephyr.model.TestCaseVersionLink;
import org.openapi.zephyr.model.TestCycleLink;
import org.openapi.zephyr.model.TestExecutionLinkList;

/**
 * TestExecution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-28T00:21:27.203715400+11:00[Australia/Sydney]")
public class TestExecution {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private ProjectLink project;

  public static final String SERIALIZED_NAME_TEST_CASE = "testCase";
  @SerializedName(SERIALIZED_NAME_TEST_CASE)
  private TestCaseVersionLink testCase;

  public static final String SERIALIZED_NAME_ENVIRONMENT = "environment";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT)
  private EnvironmentLink environment;

  public static final String SERIALIZED_NAME_TEST_EXECUTION_STATUS = "testExecutionStatus";
  @SerializedName(SERIALIZED_NAME_TEST_EXECUTION_STATUS)
  private StatusLink testExecutionStatus;

  public static final String SERIALIZED_NAME_ACTUAL_END_DATE = "actualEndDate";
  @SerializedName(SERIALIZED_NAME_ACTUAL_END_DATE)
  private OffsetDateTime actualEndDate;

  public static final String SERIALIZED_NAME_ESTIMATED_TIME = "estimatedTime";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_TIME)
  private Long estimatedTime;

  public static final String SERIALIZED_NAME_EXECUTION_TIME = "executionTime";
  @SerializedName(SERIALIZED_NAME_EXECUTION_TIME)
  private Long executionTime;

  public static final String SERIALIZED_NAME_EXECUTED_BY_ID = "executedById";
  @SerializedName(SERIALIZED_NAME_EXECUTED_BY_ID)
  private String executedById;

  public static final String SERIALIZED_NAME_ASSIGNED_TO_ID = "assignedToId";
  @SerializedName(SERIALIZED_NAME_ASSIGNED_TO_ID)
  private String assignedToId;

  public static final String SERIALIZED_NAME_COMMENT = "comment";
  @SerializedName(SERIALIZED_NAME_COMMENT)
  private String comment;

  public static final String SERIALIZED_NAME_AUTOMATED = "automated";
  @SerializedName(SERIALIZED_NAME_AUTOMATED)
  private Boolean automated;

  public static final String SERIALIZED_NAME_TEST_CYCLE = "testCycle";
  @SerializedName(SERIALIZED_NAME_TEST_CYCLE)
  private TestCycleLink testCycle;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "customFields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private Map<String, Object> customFields = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private TestExecutionLinkList links;

  public TestExecution() { 
  }

  public TestExecution id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * minimum: 1
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "1", required = true, value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    this.id = id;
  }


  public TestExecution key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Test execution key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "SA-E10", value = "Test execution key")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public TestExecution project(ProjectLink project) {
    
    this.project = project;
    return this;
  }

   /**
   * Get project
   * @return project
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProjectLink getProject() {
    return project;
  }


  public void setProject(ProjectLink project) {
    this.project = project;
  }


  public TestExecution testCase(TestCaseVersionLink testCase) {
    
    this.testCase = testCase;
    return this;
  }

   /**
   * Get testCase
   * @return testCase
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TestCaseVersionLink getTestCase() {
    return testCase;
  }


  public void setTestCase(TestCaseVersionLink testCase) {
    this.testCase = testCase;
  }


  public TestExecution environment(EnvironmentLink environment) {
    
    this.environment = environment;
    return this;
  }

   /**
   * Get environment
   * @return environment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EnvironmentLink getEnvironment() {
    return environment;
  }


  public void setEnvironment(EnvironmentLink environment) {
    this.environment = environment;
  }


  public TestExecution testExecutionStatus(StatusLink testExecutionStatus) {
    
    this.testExecutionStatus = testExecutionStatus;
    return this;
  }

   /**
   * Get testExecutionStatus
   * @return testExecutionStatus
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public StatusLink getTestExecutionStatus() {
    return testExecutionStatus;
  }


  public void setTestExecutionStatus(StatusLink testExecutionStatus) {
    this.testExecutionStatus = testExecutionStatus;
  }


  public TestExecution actualEndDate(OffsetDateTime actualEndDate) {
    
    this.actualEndDate = actualEndDate;
    return this;
  }

   /**
   * The actual end date of the test cycle. Format: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
   * @return actualEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2018-05-20T13:15:13Z", value = "The actual end date of the test cycle. Format: yyyy-MM-dd'T'HH:mm:ss'Z'")

  public OffsetDateTime getActualEndDate() {
    return actualEndDate;
  }


  public void setActualEndDate(OffsetDateTime actualEndDate) {
    this.actualEndDate = actualEndDate;
  }


  public TestExecution estimatedTime(Long estimatedTime) {
    
    this.estimatedTime = estimatedTime;
    return this;
  }

   /**
   * Estimated duration in milliseconds.
   * minimum: 0
   * @return estimatedTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "138000", value = "Estimated duration in milliseconds.")

  public Long getEstimatedTime() {
    return estimatedTime;
  }


  public void setEstimatedTime(Long estimatedTime) {
    this.estimatedTime = estimatedTime;
  }


  public TestExecution executionTime(Long executionTime) {
    
    this.executionTime = executionTime;
    return this;
  }

   /**
   * Actual test execution time in milliseconds.
   * minimum: 0
   * @return executionTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "120000", value = "Actual test execution time in milliseconds.")

  public Long getExecutionTime() {
    return executionTime;
  }


  public void setExecutionTime(Long executionTime) {
    this.executionTime = executionTime;
  }


  public TestExecution executedById(String executedById) {
    
    this.executedById = executedById;
    return this;
  }

   /**
   * Atlassian Account ID of the Jira user.
   * @return executedById
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5b10a2844c20165700ede21g", value = "Atlassian Account ID of the Jira user.")

  public String getExecutedById() {
    return executedById;
  }


  public void setExecutedById(String executedById) {
    this.executedById = executedById;
  }


  public TestExecution assignedToId(String assignedToId) {
    
    this.assignedToId = assignedToId;
    return this;
  }

   /**
   * Atlassian Account ID of the Jira user.
   * @return assignedToId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "5b10a2844c20165700ede21g", value = "Atlassian Account ID of the Jira user.")

  public String getAssignedToId() {
    return assignedToId;
  }


  public void setAssignedToId(String assignedToId) {
    this.assignedToId = assignedToId;
  }


  public TestExecution comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Comment added against overall test case execution.
   * @return comment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Test failed user could not login", value = "Comment added against overall test case execution.")

  public String getComment() {
    return comment;
  }


  public void setComment(String comment) {
    this.comment = comment;
  }


  public TestExecution automated(Boolean automated) {
    
    this.automated = automated;
    return this;
  }

   /**
   * Indicates if the test execution was done manually or not.
   * @return automated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Indicates if the test execution was done manually or not.")

  public Boolean getAutomated() {
    return automated;
  }


  public void setAutomated(Boolean automated) {
    this.automated = automated;
  }


  public TestExecution testCycle(TestCycleLink testCycle) {
    
    this.testCycle = testCycle;
    return this;
  }

   /**
   * Get testCycle
   * @return testCycle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestCycleLink getTestCycle() {
    return testCycle;
  }


  public void setTestCycle(TestCycleLink testCycle) {
    this.testCycle = testCycle;
  }


  public TestExecution customFields(Map<String, Object> customFields) {
    
    this.customFields = customFields;
    return this;
  }

  public TestExecution putCustomFieldsItem(String key, Object customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new HashMap<>();
    }
    this.customFields.put(key, customFieldsItem);
    return this;
  }

   /**
   * Multi-line text fields should denote a new line with the \\&lt;br\\&gt; syntax. Dates should be in the format &#39;yyyy-MM-dd&#39;. Users should provided by the user ID. 
   * @return customFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"Build Number\":20,\"Release Date\":\"2020-01-01\",\"Pre-Condition(s)\":\"User should have logged in. <br> User should have navigated to the administration panel.\",\"Implemented\":false,\"Category\":[\"Performance\",\"Regression\"],\"Tester\":\"fa2e582e-5e15-521e-92e3-47e6ca2e7256\"}", value = "Multi-line text fields should denote a new line with the \\<br\\> syntax. Dates should be in the format 'yyyy-MM-dd'. Users should provided by the user ID. ")

  public Map<String, Object> getCustomFields() {
    return customFields;
  }


  public void setCustomFields(Map<String, Object> customFields) {
    this.customFields = customFields;
  }


  public TestExecution links(TestExecutionLinkList links) {
    
    this.links = links;
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TestExecutionLinkList getLinks() {
    return links;
  }


  public void setLinks(TestExecutionLinkList links) {
    this.links = links;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestExecution testExecution = (TestExecution) o;
    return Objects.equals(this.id, testExecution.id) &&
        Objects.equals(this.key, testExecution.key) &&
        Objects.equals(this.project, testExecution.project) &&
        Objects.equals(this.testCase, testExecution.testCase) &&
        Objects.equals(this.environment, testExecution.environment) &&
        Objects.equals(this.testExecutionStatus, testExecution.testExecutionStatus) &&
        Objects.equals(this.actualEndDate, testExecution.actualEndDate) &&
        Objects.equals(this.estimatedTime, testExecution.estimatedTime) &&
        Objects.equals(this.executionTime, testExecution.executionTime) &&
        Objects.equals(this.executedById, testExecution.executedById) &&
        Objects.equals(this.assignedToId, testExecution.assignedToId) &&
        Objects.equals(this.comment, testExecution.comment) &&
        Objects.equals(this.automated, testExecution.automated) &&
        Objects.equals(this.testCycle, testExecution.testCycle) &&
        Objects.equals(this.customFields, testExecution.customFields) &&
        Objects.equals(this.links, testExecution.links);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, key, project, testCase, environment, testExecutionStatus, actualEndDate, estimatedTime, executionTime, executedById, assignedToId, comment, automated, testCycle, customFields, links);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestExecution {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    testCase: ").append(toIndentedString(testCase)).append("\n");
    sb.append("    environment: ").append(toIndentedString(environment)).append("\n");
    sb.append("    testExecutionStatus: ").append(toIndentedString(testExecutionStatus)).append("\n");
    sb.append("    actualEndDate: ").append(toIndentedString(actualEndDate)).append("\n");
    sb.append("    estimatedTime: ").append(toIndentedString(estimatedTime)).append("\n");
    sb.append("    executionTime: ").append(toIndentedString(executionTime)).append("\n");
    sb.append("    executedById: ").append(toIndentedString(executedById)).append("\n");
    sb.append("    assignedToId: ").append(toIndentedString(assignedToId)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    automated: ").append(toIndentedString(automated)).append("\n");
    sb.append("    testCycle: ").append(toIndentedString(testCycle)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

