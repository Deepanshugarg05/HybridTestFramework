/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option â€œZephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * FolderInput
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-02-28T00:21:27.203715400+11:00[Australia/Sydney]")
public class FolderInput {
  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private Long parentId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PROJECT_KEY = "projectKey";
  @SerializedName(SERIALIZED_NAME_PROJECT_KEY)
  private String projectKey;

  public static final String SERIALIZED_NAME_FOLDER_TYPE = "folderType";
  @SerializedName(SERIALIZED_NAME_FOLDER_TYPE)
  private String folderType;

  public FolderInput() { 
  }

  public FolderInput parentId(Long parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Folder ID of the parent folder. Must be &#x60;null&#x60; for root folders.
   * minimum: 1
   * @return parentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Folder ID of the parent folder. Must be `null` for root folders.")

  public Long getParentId() {
    return parentId;
  }


  public void setParentId(Long parentId) {
    this.parentId = parentId;
  }


  public FolderInput name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Folder name.
   * @return name
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Folder name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public FolderInput projectKey(String projectKey) {
    
    this.projectKey = projectKey;
    return this;
  }

   /**
   * Jira project key.
   * @return projectKey
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "TIS", required = true, value = "Jira project key.")

  public String getProjectKey() {
    return projectKey;
  }


  public void setProjectKey(String projectKey) {
    this.projectKey = projectKey;
  }


  public FolderInput folderType(String folderType) {
    
    this.folderType = folderType;
    return this;
  }

   /**
   * Valid values: &#x60;\&quot;TEST_CASE\&quot;&#x60;, &#x60;\&quot;TEST_PLAN\&quot;&#x60;, &#x60;\&quot;TEST_CYCLE\&quot;&#x60;
   * @return folderType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Valid values: `\"TEST_CASE\"`, `\"TEST_PLAN\"`, `\"TEST_CYCLE\"`")

  public String getFolderType() {
    return folderType;
  }


  public void setFolderType(String folderType) {
    this.folderType = folderType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FolderInput folderInput = (FolderInput) o;
    return Objects.equals(this.parentId, folderInput.parentId) &&
        Objects.equals(this.name, folderInput.name) &&
        Objects.equals(this.projectKey, folderInput.projectKey) &&
        Objects.equals(this.folderType, folderInput.folderType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(parentId, name, projectKey, folderType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FolderInput {\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    projectKey: ").append(toIndentedString(projectKey)).append("\n");
    sb.append("    folderType: ").append(toIndentedString(folderType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

