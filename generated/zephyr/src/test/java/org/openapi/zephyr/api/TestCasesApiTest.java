/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option “Zephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.api;

import org.openapi.zephyr.invoker.ApiException;
import org.openapi.zephyr.model.CreatedResource;
import org.openapi.zephyr.model.Error;
import org.openapi.zephyr.model.IssueLinkInput;
import org.openapi.zephyr.model.KeyedCreatedResource;
import org.openapi.zephyr.model.TestCase;
import org.openapi.zephyr.model.TestCaseInput;
import org.openapi.zephyr.model.TestCaseLinkList;
import org.openapi.zephyr.model.TestCaseList;
import org.openapi.zephyr.model.TestCaseVersionLinkList;
import org.openapi.zephyr.model.TestScript;
import org.openapi.zephyr.model.TestScriptInput;
import org.openapi.zephyr.model.TestStepsInput;
import org.openapi.zephyr.model.TestStepsList;
import org.openapi.zephyr.model.WebLinkInput;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestCasesApi
 */
@Ignore
public class TestCasesApiTest {

    private final TestCasesApi api = new TestCasesApi();

    
    /**
     * Create test case
     *
     * Creates a test case. Fields &#x60;priorityName&#x60; and &#x60;statusName&#x60; will be set to default values if not informed. Default values are usually “Normal” for &#x60;priorityName&#x60; and “Draft” for &#x60;statusName&#x60;. All required test case custom fields should be present in the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestCaseTest() throws ApiException {
        TestCaseInput testCaseInput = null;
                KeyedCreatedResource response = api.createTestCase(testCaseInput);
        // TODO: test validations
    }
    
    /**
     * Create issue links
     *
     * Creates a link between a test case and a Jira issue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestCaseIssueLinksTest() throws ApiException {
        String testCaseKey = null;
        IssueLinkInput issueLinkInput = null;
                CreatedResource response = api.createTestCaseIssueLinks(testCaseKey, issueLinkInput);
        // TODO: test validations
    }
    
    /**
     * Create test script
     *
     * Creates or updates the test script for a test case. If the test case currently has a sequence of test steps assigned to it, these will be implicitly removed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestCaseTestScriptTest() throws ApiException {
        String testCaseKey = null;
        TestScriptInput testScriptInput = null;
                CreatedResource response = api.createTestCaseTestScript(testCaseKey, testScriptInput);
        // TODO: test validations
    }
    
    /**
     * Post test steps
     *
     * Assigns a series of test steps to a test case, appending them to any existing sequence of test steps. A maximum of 100 steps can be posted per request. Consumers should not attempt to parallelize this operation, as the order of the steps is defined by the input order. If this endpoint is called on a test case that already has a plain text or BDD test script, that test script will implicitly be removed. All required step custom fields should be present in the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestCaseTestStepsTest() throws ApiException {
        String testCaseKey = null;
        TestStepsInput testStepsInput = null;
                CreatedResource response = api.createTestCaseTestSteps(testCaseKey, testStepsInput);
        // TODO: test validations
    }
    
    /**
     * Create web links
     *
     * Creates a link between a test case and a generic URL.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestCaseWebLinksTest() throws ApiException {
        String testCaseKey = null;
        WebLinkInput webLinkInput = null;
                CreatedResource response = api.createTestCaseWebLinks(testCaseKey, webLinkInput);
        // TODO: test validations
    }
    
    /**
     * Get test case
     *
     * Returns a test case for the given key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCaseTest() throws ApiException {
        String testCaseKey = null;
                TestCase response = api.getTestCase(testCaseKey);
        // TODO: test validations
    }
    
    /**
     * Get links
     *
     * Returns links for a test case with specified key.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCaseLinksTest() throws ApiException {
        String testCaseKey = null;
                TestCaseLinkList response = api.getTestCaseLinks(testCaseKey);
        // TODO: test validations
    }
    
    /**
     * Get test script
     *
     * Returns the test script for the given test case
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCaseTestScriptTest() throws ApiException {
        String testCaseKey = null;
                TestScript response = api.getTestCaseTestScript(testCaseKey);
        // TODO: test validations
    }
    
    /**
     * Get test steps
     *
     * Returns the test steps for the given test case. Provides a paged response, with 100 items per page.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCaseTestStepsTest() throws ApiException {
        String testCaseKey = null;
        Long maxResults = null;
        Long startAt = null;
                TestStepsList response = api.getTestCaseTestSteps(testCaseKey, maxResults, startAt);
        // TODO: test validations
    }
    
    /**
     * Get version
     *
     * Retrieves a specific version of a test case.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestCaseVersionTest() throws ApiException {
        String testCaseKey = null;
        Long version = null;
                TestCase response = api.getTestCaseVersion(testCaseKey, version);
        // TODO: test validations
    }
    
    /**
     * Get versions
     *
     * Returns all test case versions for a test case with specified key. Response is ordered by most recent first.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTestCaseVersionsTest() throws ApiException {
        String testCaseKey = null;
        Long maxResults = null;
        Long startAt = null;
                TestCaseVersionLinkList response = api.listTestCaseVersions(testCaseKey, maxResults, startAt);
        // TODO: test validations
    }
    
    /**
     * Get test cases
     *
     * Retrieves all test cases. Query parameters can be used to filter the results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTestCasesTest() throws ApiException {
        String projectKey = null;
        Long folderId = null;
        Long maxResults = null;
        Long startAt = null;
                TestCaseList response = api.listTestCases(projectKey, folderId, maxResults, startAt);
        // TODO: test validations
    }
    
    /**
     * Update test case
     *
     * Updates an existing test case. If the project has test case custom fields, all custom fields should be present in the request. To leave any of them blank, please set them null if they are not required custom fields. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTestCaseTest() throws ApiException {
        String testCaseKey = null;
        TestCase testCase = null;
                api.updateTestCase(testCaseKey, testCase);
        // TODO: test validations
    }
    
}
