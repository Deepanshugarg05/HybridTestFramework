/*
 * Zephyr Scale Cloud API
 *  # Introduction  This is the **Zephyr Scale Cloud** API. If you are looking for the Server API, please refer to the [documentation](https://support.smartbear.com/zephyr-scale-server/docs/) for more information.  This API uses the OpenAPI specification. If you want to generate clients for different languages, please use the link above to download the API specification and use it with your preferred tools.  For feature requests or general support, please head to our [support site](https://smartbear.atlassian.net/servicedesk/customer/portal/42).  # Authentication The API authentication is based on JSON Web Token (JWT), which is a key for accessing the API. Authenticating using JWT requires the following steps: * Generate a key * Make authenticated requests  ## Generate a Key For accessing the API, you must generate an access key in Jira. To generate an access token, click on your profile picture at the page bottom left, and choose the option â€œZephyr Scale API keys\". For more information, please check out the [documentation](https://support.smartbear.com/zephyr-scale-cloud/docs/api-and-test-automation/generating-access-keys.html).  ## Accessing the API The API is available at the following base URL: ``` https://api.zephyrscale.smartbear.com/v2 ``` For example, the final URL for retrieving test cases would be: ``` https://api.zephyrscale.smartbear.com/v2/testcases ```  ## Making Authenticated Requests To authenticate subsequent API requests, you must provide a valid token in an HTTP header, which is the key generated on the previous step: ``` Authorization: Bearer {bearer_token} ``` # Representing Users  Previous API definitions used Atlassian User Keys to identify users. This parameter is deprecated because of privacy changes. Use Atlassian Account ID instead.   Atlassian Account IDs are globally unique opaque identifiers for identifying a user. Every Atlassian Account has a ID which is assigned when the account is created and is immutable. Account IDs contain no personally identifiable information and are only used to retrieve user information ondemand. This API does not return any user information other than the Account ID (with the exception of the deprecated user keys during the deprecation period). 
 *
 * The version of the OpenAPI document: 2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapi.zephyr.api;

import org.openapi.zephyr.invoker.ApiException;
import org.openapi.zephyr.model.Error;
import org.openapi.zephyr.model.IssueLinkInput;
import java.time.OffsetDateTime;
import org.openapi.zephyr.model.TestExecution;
import org.openapi.zephyr.model.TestExecutionInput;
import org.openapi.zephyr.model.TestExecutionLinkList;
import org.openapi.zephyr.model.TestExecutionList;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TestExecutionsApi
 */
@Ignore
public class TestExecutionsApiTest {

    private final TestExecutionsApi api = new TestExecutionsApi();

    
    /**
     * Create test execution
     *
     * Creates a test execution. All required test execution custom fields should be present in the request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestExecutionTest() throws ApiException {
        TestExecutionInput testExecutionInput = null;
                api.createTestExecution(testExecutionInput);
        // TODO: test validations
    }
    
    /**
     * Create issue links
     *
     * Creates a link between a test execution and a Jira issue.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTestExecutionIssueLinkTest() throws ApiException {
        String testExecutionIdOrKey = null;
        IssueLinkInput issueLinkInput = null;
                api.createTestExecutionIssueLink(testExecutionIdOrKey, issueLinkInput);
        // TODO: test validations
    }
    
    /**
     * Get test execution
     *
     * Returns a test execution for the given ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestExecutionTest() throws ApiException {
        String testExecutionIdOrKey = null;
        Boolean includeStepLinks = null;
                TestExecution response = api.getTestExecution(testExecutionIdOrKey, includeStepLinks);
        // TODO: test validations
    }
    
    /**
     * Get links
     *
     * Returns links for a test execution with specified ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTestExecutionLinksTest() throws ApiException {
        String testExecutionIdOrKey = null;
                TestExecutionLinkList response = api.listTestExecutionLinks(testExecutionIdOrKey);
        // TODO: test validations
    }
    
    /**
     * Get test executions
     *
     * Returns all test executions. Query parameters can be used to filter by project and folder.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTestExecutionsTest() throws ApiException {
        String projectKey = null;
        String testCycle = null;
        String testCase = null;
        OffsetDateTime actualEndDateAfter = null;
        OffsetDateTime actualEndDateBefore = null;
        Boolean includeStepLinks = null;
        Long maxResults = null;
        Long startAt = null;
                TestExecutionList response = api.listTestExecutions(projectKey, testCycle, testCase, actualEndDateAfter, actualEndDateBefore, includeStepLinks, maxResults, startAt);
        // TODO: test validations
    }
    
}
